//
// Generated by JTB 1.3.2
//

package jp.go.aist.rtm.rtcbuilder.corba.idl.parser.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "enum"
 * identifier -> identifier()
 * nodeToken1 -> "{"
 * enumerator -> enumerator()
 * nodeListOptional -> ( "," enumerator() )*
 * nodeToken2 -> "}"
 */
public class enum_type implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public identifier identifier;
   public NodeToken nodeToken1;
   public enumerator enumerator;
   public NodeListOptional nodeListOptional;
   public NodeToken nodeToken2;

   public enum_type(NodeToken n0, identifier n1, NodeToken n2, enumerator n3, NodeListOptional n4, NodeToken n5) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n1;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      enumerator = n3;
      if ( enumerator != null ) enumerator.setParent(this);
      nodeListOptional = n4;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeToken2 = n5;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public enum_type(identifier n0, enumerator n1, NodeListOptional n2) {
      nodeToken = new NodeToken("enum");
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n0;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken1 = new NodeToken("{");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      enumerator = n1;
      if ( enumerator != null ) enumerator.setParent(this);
      nodeListOptional = n2;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeToken2 = new NodeToken("}");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

