//
// Generated by JTB 1.3.2
//

package jp.go.aist.rtm.rtcbuilder.corba.idl.parser.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "exception"
 * identifier -> identifier()
 * nodeOptional -> ( "{" )?
 * nodeListOptional -> ( member() | "exception_body" )*
 * nodeOptional1 -> ( "}" )?
 */
public class except_dcl implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public identifier identifier;
   public NodeOptional nodeOptional;
   public NodeListOptional nodeListOptional;
   public NodeOptional nodeOptional1;

   public except_dcl(NodeToken n0, identifier n1, NodeOptional n2, NodeListOptional n3, NodeOptional n4) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n1;
      if ( identifier != null ) identifier.setParent(this);
      nodeOptional = n2;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
      nodeListOptional = n3;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeOptional1 = n4;
      if ( nodeOptional1 != null ) nodeOptional1.setParent(this);
   }

   public except_dcl(identifier n0, NodeOptional n1, NodeListOptional n2, NodeOptional n3) {
      nodeToken = new NodeToken("exception");
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n0;
      if ( identifier != null ) identifier.setParent(this);
      nodeOptional = n1;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
      nodeListOptional = n2;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeOptional1 = n3;
      if ( nodeOptional1 != null ) nodeOptional1.setParent(this);
   }

   public void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

