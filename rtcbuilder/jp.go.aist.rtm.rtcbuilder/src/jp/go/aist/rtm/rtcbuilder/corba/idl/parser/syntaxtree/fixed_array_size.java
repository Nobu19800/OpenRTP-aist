//
// Generated by JTB 1.3.2
//

package jp.go.aist.rtm.rtcbuilder.corba.idl.parser.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "["
 * positive_int_const -> positive_int_const()
 * nodeToken1 -> "]"
 */
public class fixed_array_size implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public positive_int_const positive_int_const;
   public NodeToken nodeToken1;

   public fixed_array_size(NodeToken n0, positive_int_const n1, NodeToken n2) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      positive_int_const = n1;
      if ( positive_int_const != null ) positive_int_const.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
   }

   public fixed_array_size(positive_int_const n0) {
      nodeToken = new NodeToken("[");
      if ( nodeToken != null ) nodeToken.setParent(this);
      positive_int_const = n0;
      if ( positive_int_const != null ) positive_int_const.setParent(this);
      nodeToken1 = new NodeToken("]");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
   }

   public void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

