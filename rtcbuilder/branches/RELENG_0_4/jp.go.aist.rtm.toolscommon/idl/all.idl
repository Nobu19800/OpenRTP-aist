module RTM {
	typedef short RtmRes;
	const RtmRes RTM_OK = 0;
	const RtmRes RTM_ERR = 1;
	const RtmRes RTM_WARNING = 2;
	const RtmRes RTM_FATAL_ERR = 4;
	struct NamedValue {
		string name;
		any value;
	};
	typedef sequence<NamedValue> NVList;
	struct Time
	{
		unsigned long sec; // sec
		unsigned long nsec; // nano sec
	};
};

module RTM {
	typedef string SubscriptionID;
	struct PortProfile
	{
		string name;
		CORBA::TypeCode port_type;
		NVList properties;
	};
	interface InPort
	{
		exception Disconnected{};
		void put(in any data) raises(Disconnected);
		readonly attribute PortProfile profile;
	};
	typedef sequence<InPort> InPortList;
	typedef sequence<PortProfile> PortProfileList;
}; // end of module RTM


module RTM {
	typedef short SubscriptionType;
	const SubscriptionType OPS_ONCE = 0;
	const SubscriptionType OPS_PERIODIC = 1;
	const SubscriptionType OPS_NEW = 2;
	const SubscriptionType OPS_TRIGGERED = 3;
	const SubscriptionType OSP_PERIODIC_NEW = 4;
	const SubscriptionType OPS_NEW_PERIODIC = 5;
	const SubscriptionType OPS_PERIODIC_TRIGGERED = 6;
	const SubscriptionType OPS_TRIGGERRED_PERIODIC = 7;
	struct SubscriberProfile
	{
		SubscriptionType subscription_type;
		boolean event_base;
		NVList properties;
	};
	interface OutPort
	{
		any get();
		RtmRes subscribe(in InPort in_port, out SubscriptionID id,
			in SubscriberProfile profile);
		RtmRes unsubscribe(in SubscriptionID id);
		readonly attribute InPortList inports;
		readonly attribute PortProfile profile;
	};
	typedef sequence<OutPort> OutPortList;
}; // end of module RTM

module RTM {
	interface RTComponent
		// : NamedObject, PropertySet
	{
		readonly attribute string instance_id;
		readonly attribute string implementation_id;
		readonly attribute string description;
		readonly attribute string version;
		readonly attribute string maker;
		readonly attribute string category;
		typedef short ComponentState;
		const ComponentState RTC_UNKNOWN = 0;
		const ComponentState RTC_BORN = 1;
		const ComponentState RTC_INITIALIZING = 2;
		const ComponentState RTC_READY = 3;
		const ComponentState RTC_STARTING = 4;
		const ComponentState RTC_ACTIVE = 5;
		const ComponentState RTC_STOPPING = 6;
		const ComponentState RTC_ABORTING = 7;
		const ComponentState RTC_ERROR = 8;
		const ComponentState RTC_FATAL_ERROR = 9;
		const ComponentState RTC_EXITING = 10;
		exception IllegalTransition {};RtmRes rtc_worker();
		RtmRes rtc_start() raises (IllegalTransition);
		RtmRes rtc_stop() raises (IllegalTransition);
		RtmRes rtc_reset() raises (IllegalTransition);
		RtmRes rtc_exit() raises (IllegalTransition);
		RtmRes rtc_kill();
		readonly attribute OutPort rtc_state;
		exception NoSuchName { string name; };
		readonly attribute InPortList inports;
		InPort get_inport(in string name) raises (NoSuchName);
		readonly attribute OutPortList outports;
		OutPort get_outport(in string name) raises (NoSuchName);
		//! Return connector port object reference list
		// readonly attribute ConnectorList connectors;
		// OutPort get_connector(in string name) raises (NoSuchName);
		// readonly attribute PropertySet rtc_settings;
	};
	typedef sequence<RTComponent> RTComponentList;
}; // end of module RTM

module RTM {
	interface RTComponent;
	enum RTComponentType {
		STATIC,
		UNIQUE,
		COMMUTATIVE
	};
	enum RTCActivityType {
		PERIODIC,
		SPORADIC,
		EVENT_DRIVEN
	};
	enum RTCLangType {
		COMPILE,
		SCRIPT
	};
	struct RTCProfile
	{
		string name;
		string instance_id;
		string implementation_id;
		string description;
		string version;
		string maker;
		string category;
		RTComponentType component_type;
		RTCActivityType activity_type;
		long max_instance;
		string language;
		RTCLangType language_type;
		string module_profile_file;
		PortProfileList outport_profile_list;
		PortProfileList inport_profile_list;
	};
};

module RTM {
	interface RTCBase;
	typedef sequence<RTCBase> RTCBaseList;
	interface RTCBase
		: RTComponent
	{
		RtmRes rtc_ready_entry();
		RtmRes rtc_ready_do();
		RtmRes rtc_ready_exit();
		RtmRes rtc_active_entry();
		RtmRes rtc_active_do();
		RtmRes rtc_active_exit();
		RtmRes rtc_error_entry();
		RtmRes rtc_error_do();
		RtmRes rtc_error_exit();
		RtmRes rtc_fatal_entry();
		RtmRes rtc_fatal_do();
		RtmRes rtc_fatal_exit();
		RtmRes rtc_init_entry();
		RtmRes rtc_starting_entry();
		RtmRes rtc_stopping_entry();
		RtmRes rtc_aborting_entry();
		RtmRes rtc_exiting_entry();
		RtmRes rtc_stop_thread();
		RtmRes rtc_start_thread();
		RtmRes rtc_set_parent(in RTCBase comp);
		RtmRes rtc_add_component(in RTCBase comp);
		RtmRes rtc_delete_component(in RTCBase comp);
		RtmRes rtc_replace_component(in RTCBase comp1, in RTCBase comp2);
		RtmRes rtc_replace_component_by_name(in string name1, in string name2);
		RTCBaseList rtc_components();
		RTCBase rtc_get_component(in string name);
		RtmRes rtc_attach_inport(in InPort in_port);
		RtmRes rtc_attach_inport_by_name(in RTCBase comp, in string name);
		RtmRes rtc_detatch_inport(in InPort in_port);
		RtmRes rtc_detatch_inport_by_name(in string name);
		RtmRes rtc_attach_outport(in OutPort out_port);
		RtmRes rtc_attach_outport_by_name(in RTCBase comp, in string name);
		RtmRes rtc_detatch_outport(in OutPort out_port);
		RtmRes rtc_detatch_outport_by_name(in string name);
		readonly attribute RTCProfile profile;
	};

};

module RTM {
	struct TimedState
	{
		Time tm;
		short data;
	};
	struct TimedShort
	{
		Time tm;
		short data;
	};
	struct TimedLong
	{
		Time tm;
		long data;
	};
	struct TimedUShort
	{
		Time tm;
		unsigned short data;
	};
	struct TimedULong
	{
		Time tm;
		unsigned long data;
	};
	struct TimedFloat
	{
		Time tm;
		float data;
	};
	struct TimedDouble
	{
		Time tm;
		double data;
	};
	struct TimedChar
	{
		Time tm;
		char data;
	};
	struct TimedBoolean
	{
		Time tm;
		boolean data;
	};
	struct TimedOctet
	{
		Time tm;
		octet data;
	};
	struct TimedString
	{
		Time tm;
		string data;
	};

	struct TimedShortSeq
	{
		Time tm;
		sequence<short> data;
	};
	struct TimedLongSeq
	{
		Time tm;
		sequence<long> data;
	};
	struct TimedUShortSeq
	{
		Time tm;
		sequence<unsigned short> data;
	};
	struct TimedULongSeq
	{
		Time tm;
		sequence<unsigned long> data;
	};
	struct TimedFloatSeq
	{
		Time tm;
		sequence<float> data;
	};
	struct TimedDoubleSeq
	{
		Time tm;
		sequence<double> data;
	};
	struct TimedCharSeq
	{
		Time tm;
		sequence<char> data;
	};
	struct TimedBooleanSeq
	{
		Time tm;
		sequence<boolean> data;
	};
	struct TimedOctetSeq
	{
		Time tm;
		sequence<octet> data;
	};
	struct TimedStringSeq
	{
		Time tm;
		sequence<string> data;
	};
};


module RTM
{
	typedef sequence<string> ComponentFactoryList;
	interface RTCManager
	{
		RtmRes load(in string pathname, in string initfunc);
		RtmRes unload(in string pathname);
		RTCBase create_component(in string comp_name,
			out string instance_name);
		RtmRes delete_component(in string instance_name);
		ComponentFactoryList component_factory_list();
		RTCBaseList component_list();
		RtmRes command(in string cmd, out string ret);
	};
}; // end of namespace RTM