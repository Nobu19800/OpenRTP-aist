#!/usr/bin/env python
# -*- Python -*-

"""
 \file ${rtcParam.name}.py
 \brief ${rtcParam.description}
 \date $Date$
#parse("jp/go/aist/rtm/rtcbuilder/template/python/Py_Document.template")
"""
import sys
import time
sys.path.append(".")

# Import RTM module
import OpenRTM
import RTC

# Import Service implementation class
# <rtc-template block="service_impl">
#foreach($providerIdlFile in ${rtcParam.providerIdlPathes})
from ${tmpltHelper.getFilenameNoExt(${providerIdlFile.idlFile})}_idl_example import *
#end

# </rtc-template>

# Import Service stub modules
# <rtc-template block="consumer_import">
#if(${rtcParam.originalConsumerIdls.size()}>0)
import _GlobalIDL, _GlobalIDL__POA

#end
# </rtc-template>


# This module's spesification
# <rtc-template block="module_spec">
${rtcParam.name}_spec = ["implementation_id", "${rtcParam.name}", 
		 "type_name",         "${rtcParam.name}", 
		 "description",       "${rtcParam.description}", 
		 "version",           "${rtcParam.version}", 
		 "vendor",            "${rtcParam.vender}", 
		 "category",          "${rtcParam.category}", 
		 "activity_type",     "${rtcParam.componentType}", 
		 "max_instance",      "${rtcParam.maxInstance}", 
		 "language",          "Python", 
		 "lang_type",         "SCRIPT",
#if( ${rtcParam.IsExecutionRateSet()} )		 "exec_cxt.periodic.rate", "${rtcParam.executionRate}",
#end
#foreach($configParam in ${rtcParam.configParams})
		 "conf.default.${configParam.name}", "${configParam.defaultVal}",
#end
#if( ${rtcParam.configParameterParams.size()} > 0 )
#foreach($parameterParam in ${rtcParam.configParameterParams})  
		 "${parameterParam.configName}", "${parameterParam.defaultVal}",
#end
#end
		 ""]
# </rtc-template>

class ${rtcParam.name}(OpenRTM.DataFlowComponentBase):
	
	"""
	\class ${rtcParam.name}
	\brief ${rtcParam.description}
#if( ${rtcParam.docDescription.length()} > 0 )
	
	${tmpltHelper.convertModuleDocPy(${rtcParam.docDescription})}
#end
#if( ${rtcParam.docInOut.length()} > 0 )
	
	${tmpltHelper.convertModuleDocPy(${rtcParam.docInOut})}
#end
#if( ${rtcParam.docAlgorithm.length()} > 0 )
	
	${tmpltHelper.convertModuleDocPy(${rtcParam.docAlgorithm})}
#end
#if( ${rtcParam.docReference.length()} > 0 )
	
	${tmpltHelper.convertModuleDocPy(${rtcParam.docReference})}
#end
	
	"""
	def __init__(self, manager):
		"""
		\brief constructor
		\param manager Maneger Object
		"""
		OpenRTM.DataFlowComponentBase.__init__(self, manager)

#foreach($port in ${rtcParam.inports})
		self._d_${port.tmplVarName} = RTC.${port.type}(RTC.Time(0,0),${pyConv.convPortInit(${port.type})})
		"""
#if(${port.docDescription.length()}>0)		${tmpltHelper.convertDescDocPy(${port.docDescription})}
#end
#if(${port.docType.length()}>0)		 - Type: ${tmpltHelper.convertTypeDocPy(${port.docType})}
#end
#if(${port.docNum.length()}>0)		 - Number: ${tmpltHelper.convertNumberDocPy(${port.docNum})}
#end
#if(${port.docSemantics.length()}>0)		 - Semantics: ${tmpltHelper.convertSemanticsDocPy(${port.docSemantics})}
#end
#if(${port.docUnit.length()}>0)		 - Unit: ${tmpltHelper.convertTypeDocPy(${port.docUnit})}
#end
#if(${port.docOccurrence.length()}>0)		 - Frequency: ${tmpltHelper.convertFrequencyDocPy(${port.docOccurrence})}
#end
#if(${port.docOperation.length()}>0)		 - Operation Cycle: ${tmpltHelper.convertCycleDocPy(${port.docOperation})}
#end
		"""
		self._${port.name}In = OpenRTM.InPort("${port.name}", self._d_${port.tmplVarName}, OpenRTM.RingBuffer(8))
#end
#foreach($port in ${rtcParam.outports})
		self._d_${port.tmplVarName} = RTC.${port.type}(RTC.Time(0,0),${pyConv.convPortInit(${port.type})})
		"""
#if(${port.docDescription.length()}>0)		${tmpltHelper.convertDescDocPy(${port.docDescription})}
#end
#if(${port.docType.length()}>0)		 - Type: ${tmpltHelper.convertTypeDocPy(${port.docType})}
#end
#if(${port.docNum.length()}>0)		 - Number: ${tmpltHelper.convertNumberDocPy(${port.docNum})}
#end
#if(${port.docSemantics.length()}>0)		 - Semantics: ${tmpltHelper.convertSemanticsDocPy(${port.docSemantics})}
#end
#if(${port.docUnit.length()}>0)		 - Unit: ${tmpltHelper.convertTypeDocPy(${port.docUnit})}
#end
#if(${port.docOccurrence.length()}>0)		 - Frequency: ${tmpltHelper.convertFrequencyDocPy(${port.docOccurrence})}
#end
#if(${port.docOperation.length()}>0)		 - Operation Cycle: ${tmpltHelper.convertCycleDocPy(${port.docOperation})}
#end
		"""
		self._${port.name}Out = OpenRTM.OutPort("${port.name}", self._d_${port.tmplVarName}, OpenRTM.RingBuffer(8))
#end
		

		# Set InPort buffers
#foreach($port in ${rtcParam.inports})
		self.registerInPort("${port.name}",self._${port.name}In)
#end
		
		# Set OutPort buffers
#foreach($port in ${rtcParam.outports})
		self.registerOutPort("${port.name}",self._${port.name}Out)
#end
		

#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
		"""
#if(${servicePort.docDescription.length()}>0)		${tmpltHelper.convertDescDocPy(${servicePort.docDescription})}
#end
#if(${servicePort.docIfDescription.length()}>0)		Interface: ${tmpltHelper.convertInterfacePy(${servicePort.docIfDescription})}
#end
		"""
		self._${servicePort.name}Port = OpenRTM.CorbaPort("${servicePort.name}")
#end#end#end
		

#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==0)
		"""
#if(${serviceInterface.docDescription.length()}>0)		${tmpltHelper.convertDescDocPy(${serviceInterface.docDescription})}
#end
#if(${serviceInterface.docArgument.length()}>0)		 - Argument:      ${tmpltHelper.convertDetailPy(${serviceInterface.docArgument})}
#end
#if(${serviceInterface.docReturn.length()}>0)		 - Return Value:  ${tmpltHelper.convertDetailPy(${serviceInterface.docReturn})}
#end
#if(${serviceInterface.docException.length()}>0)		 - Exception:     ${tmpltHelper.convertDetailPy(${serviceInterface.docException})}
#end
#if(${serviceInterface.docPreCondition.length()}>0)		 - PreCondition:  ${tmpltHelper.convertDetailPy(${serviceInterface.docPreCondition})}
#end
#if(${serviceInterface.docPostCondition.length()}>0)		 - PostCondition: ${tmpltHelper.convertDetailPy(${serviceInterface.docPostCondition})}
#end
		"""
		self._${serviceInterface.tmplVarName} = ${serviceInterface.interfaceType}_i()
#end#end#end#end#end
		

#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==1)
		"""
#if(${serviceInterface.docDescription.length()}>0)		${tmpltHelper.convertDescDocPy(${serviceInterface.docDescription})}
#end
#if(${serviceInterface.docArgument.length()}>0)		 - Argument:      ${tmpltHelper.convertDetailPy(${serviceInterface.docArgument})}
#end
#if(${serviceInterface.docReturn.length()}>0)		 - Return Value:  ${tmpltHelper.convertDetailPy(${serviceInterface.docReturn})}
#end
#if(${serviceInterface.docException.length()}>0)		 - Exception:     ${tmpltHelper.convertDetailPy(${serviceInterface.docException})}
#end
#if(${serviceInterface.docPreCondition.length()}>0)		 - PreCondition:  ${tmpltHelper.convertDetailPy(${serviceInterface.docPreCondition})}
#end
#if(${serviceInterface.docPostCondition.length()}>0)		 - PostCondition: ${tmpltHelper.convertDetailPy(${serviceInterface.docPostCondition})}
#end
		"""
		self._${serviceInterface.tmplVarName} = OpenRTM.CorbaConsumer(interfaceType=_GlobalIDL.${serviceInterface.interfaceType})
#end#end#end#end#end
		
		# Set service provider to Ports
#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==0)
		self._${servicePort.name}Port.registerProvider("${serviceInterface.name}", "${serviceInterface.interfaceType}", self._${serviceInterface.tmplVarName})
#end#end#end#end#end
		
		# Set service consumers to Ports
#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==1)
		self._${servicePort.name}Port.registerConsumer("${serviceInterface.name}", "${serviceInterface.interfaceType}", self._${serviceInterface.tmplVarName})
#end#end#end#end#end
		
		# Set CORBA Service Ports
#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
		self.registerPort(self._${servicePort.name}Port)
#end#end#end
		

		# initialize of configuration-data.
		# <rtc-template block="init_conf_param">
#foreach($configParam in ${rtcParam.configParams})
		"""
		${tmpltHelper.convertDescDocPy(${configParam.docDescription})}
		 - Name: ${configParam.docDataName} ${configParam.tmplVarName}
		 - DefaultValue: ${configParam.defaultVal}
#if(${configParam.docUnit.length()}>0)		 - Unit: ${tmpltHelper.convertUnitDocPy(${configParam.docUnit})}
#end
#if(${configParam.docRange.length()}>0)		 - Range: ${tmpltHelper.convertRangeDocPy(${configParam.docRange})}
#end
#if(${configParam.docConstraint.length()}>0)		 - Constraint: ${tmpltHelper.convertConstraintDocPy(${configParam.docConstraint})}
#end
		"""
		self._${configParam.tmplVarName} = [${pyConv.convDefaultVal(${configParam})}]
#end
		
		# </rtc-template>


		 
	def onInitialize(self):
		"""
#if(${rtcParam.getDocActionOverView(0).length()}>0)		${tmpltHelper.convertDescDocPy(${rtcParam.getDocActionOverView(0)})}
#end
		
		The initialize action (on CREATED->ALIVE transition)
		formaer rtc_init_entry() 
		
		\return RTC::ReturnCode_t
		
#if(${rtcParam.getDocActionPreCondition(0).length()}>0)		\pre ${tmpltHelper.convertPreDocPy(${rtcParam.getDocActionPreCondition(0)})}
#end
#if(${rtcParam.getDocActionPostCondition(0).length()}>0)		\post ${tmpltHelper.convertPostDocPy(${rtcParam.getDocActionPostCondition(0)})}
#end
		"""
		# Bind variables and configuration variable
#foreach($configParam in ${rtcParam.configParams})
		self.bindParameter("${configParam.name}", self._${configParam.tmplVarName}, "${configParam.defaultVal}")
#end
		
		return RTC.RTC_OK


	
	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end${def} onFinalize(self, ec_id):
	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(1).length()}>0)	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(1)})}
#end
	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	The finalize action (on ALIVE->END transition)
	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	formaer rtc_exiting_entry()
	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(1).length()}>0)	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(1)})}
#end
#if(${rtcParam.getDocActionPostCondition(1).length()}>0)	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(1)})}
#end
	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(1)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end${def} onStartup(self, ec_id):
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(2).length()}>0)	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(2)})}
#end
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	The startup action when ExecutionContext startup
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	former rtc_starting_entry()
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(2).length()}>0)	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(2)})}
#end
#if(${rtcParam.getDocActionPostCondition(2).length()}>0)	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(2)})}
#end
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(2)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end${def} onShutdown(self, ec_id):
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(3).length()}>0)	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(3)})}
#end
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	The shutdown action when ExecutionContext stop
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	former rtc_stopping_entry()
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(3).length()}>0)	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(3)})}
#end
#if(${rtcParam.getDocActionPostCondition(3).length()}>0)	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(3)})}
#end
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(3)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end${def} onActivated(self, ec_id):
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(4).length()}>0)	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(4)})}
#end
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	The activated action (Active state entry action)
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	former rtc_active_entry()
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(4).length()}>0)	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(4)})}
#end
#if(${rtcParam.getDocActionPostCondition(4).length()}>0)	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(4)})}
#end
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(4)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end${def} onDeactivated(self, ec_id):
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(5).length()}>0)	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(5)})}
#end
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	The deactivated action (Active state exit action)
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	former rtc_active_exit()
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(5).length()}>0)	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(5)})}
#end
#if(${rtcParam.getDocActionPostCondition(5).length()}>0)	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(5)})}
#end
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(5)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end${def} onExecute(self, ec_id):
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(6).length()}>0)	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(6)})}
#end
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	The execution action that is invoked periodically
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	former rtc_active_do()
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(6).length()}>0)	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(6)})}
#end
#if(${rtcParam.getDocActionPostCondition(6).length()}>0)	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(6)})}
#end
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(6)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end${def} onAborting(self, ec_id):
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(7).length()}>0)	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(7)})}
#end
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	The aborting action when main logic error occurred.
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	former rtc_aborting_entry()
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(7).length()}>0)	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(7)})}
#end
#if(${rtcParam.getDocActionPostCondition(7).length()}>0)	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(7)})}
#end
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(7)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end${def} onError(self, ec_id):
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(8).length()}>0)	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(8)})}
#end
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	The error action in ERROR state
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	former rtc_error_do()
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(8).length()}>0)	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(8)})}
#end
#if(${rtcParam.getDocActionPostCondition(8).length()}>0)	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(8)})}
#end
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(8)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end${def} onReset(self, ec_id):
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(9).length()}>0)	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(9)})}
#end
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	The reset action that is invoked resetting
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	This is same but different the former rtc_init_entry()
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(9).length()}>0)	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(9)})}
#end
#if(${rtcParam.getDocActionPostCondition(9).length()}>0)	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(9)})}
#end
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(9)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end${def} onStateUpdate(self, ec_id):
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(10).length()}>0)	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(10)})}
#end
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	The state update action that is invoked after onExecute() action
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	no corresponding operation exists in OpenRTm-aist-0.2.0
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(10).length()}>0)	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(10)})}
#end
#if(${rtcParam.getDocActionPostCondition(10).length()}>0)	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(10)})}
#end
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(10)})${sharp}#end	return RTC.RTC_OK
	
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end${def} onRateChanged(self, ec_id):
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	"""
#if(${rtcParam.getDocActionOverView(11).length()}>0)	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	${tmpltHelper.convertActivityDocPy(${rtcParam.getDocActionOverView(11)})}
#end
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	The action that is invoked when execution context's rate is changed
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	no corresponding operation exists in OpenRTm-aist-0.2.0
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	\param ec_id target ExecutionContext Id
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	\return RTC::ReturnCode_t
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end

#if(${rtcParam.getDocActionPreCondition(11).length()}>0)	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	\pre ${tmpltHelper.convertPreShDocPy(${rtcParam.getDocActionPreCondition(11)})}
#end
#if(${rtcParam.getDocActionPostCondition(11).length()}>0)	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	\post ${tmpltHelper.convertPostShDocPy(${rtcParam.getDocActionPostCondition(11)})}
#end
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	"""
	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end

	#if(${rtcParam.IsNotImplemented(11)})${sharp}#end	return RTC.RTC_OK
	



def MyModuleInit(manager):
    profile = OpenRTM.Properties(defaults_str=${rtcParam.name}_spec)
    manager.registerFactory(profile,
                            ${rtcParam.name},
                            OpenRTM.Delete)

    # Create a component
    comp = manager.createComponent("${rtcParam.name}")



def main():
	mgr = OpenRTM.Manager.init(len(sys.argv), sys.argv)
	mgr.setModuleInitProc(MyModuleInit)
	mgr.activateManager()
	mgr.runManager()

if __name__ == "__main__":
	main()

