#!/usr/bin/env python

"""
 \file ${idlFileParam.idlFileNoExt}_idl_examplefile.py
 \brief Python example implementations generated from ${idlFileParam.idlFile}
 \date $Date$

#if( ${rtcParam.docCreator.length()} > 0 )
 \author ${tmpltHelperPy.convertAuthorDocPy(${rtcParam.docCreator})}
#end
#if( ${rtcParam.docLicense.length()} > 0 )

 ${tmpltHelperPy.convertDocPy(${rtcParam.docLicense})}
#end

"""

import CORBA, PortableServer

# Import the Python stub modules so type definitions are available.

import _GlobalIDL

# Import the Python Skeleton modules so skeleton base classes are available.

import _GlobalIDL__POA

#foreach($serviceClassParam in ${idlFileParam.serviceClassParams})

class ${serviceClassParam.name}_i (_GlobalIDL__POA.${serviceClassParam.name}):
    """
    \class ${serviceClassParam.name}_i
    Example class implementing IDL interface ${serviceClassParam.name}
    """

    def __init__(self):
        """
        \brief standard constructor
        Initialise member variables here
        """
        pass

#foreach($serviceMethodParam in ${serviceClassParam.methods})
    # ${pyConv.convCORBA2PythonArg(${serviceMethodParam.type})} ${serviceMethodParam.name}(#foreach($serviceArgumentParam in ${serviceMethodParam.arguments})#if($velocityCount > 1), #end${serviceArgumentParam.direction} ${pyConv.convCORBA2PythonArg(${serviceArgumentParam.type})} ${serviceArgumentParam.name}#end)
    def ${serviceMethodParam.name}(self${pyConv.selectInParamName(${serviceMethodParam},${serviceClassParam})}):
        raise CORBA.NO_IMPLEMENT(0, CORBA.COMPLETED_NO)
        # *** Implement me
        # Must return:${pyConv.selectOutParamName(${serviceMethodParam},${serviceClassParam})}

#end

#end
if __name__ == "__main__":
    import sys
    
    # Initialise the ORB
    orb = CORBA.ORB_init(sys.argv)
    
    # As an example, we activate an object in the Root POA
    poa = orb.resolve_initial_references("RootPOA")

    # Create an instance of a servant class
    servant = ${idlFileParam.serviceClassParams.get(0).name}_i()

    # Activate it in the Root POA
    poa.activate_object(servant)

    # Get the object reference to the object
    objref = servant._this()
    
    # Print a stringified IOR for it
    print orb.object_to_string(objref)

    # Activate the Root POA's manager
    poa._get_the_POAManager().activate()

    # Run the ORB, blocking this thread
    orb.run()

