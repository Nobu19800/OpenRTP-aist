# Python stubs generated by omniidl from MyService.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(2,0, __file__)

try:
    _omniORB_StructBase = omniORB.StructBase
except AttributeError:
    class _omniORB_StructBase: pass


#
# Start of module "_GlobalIDL"
#
__name__ = "_GlobalIDL"
_0__GlobalIDL = omniORB.openModule("_GlobalIDL", r"MyService.idl")
_0__GlobalIDL__POA = omniORB.openModule("_GlobalIDL__POA", r"MyService.idl")


# typedef ... EchoList
class EchoList:
    _NP_RepositoryId = "IDL:EchoList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0__GlobalIDL.EchoList = EchoList
_0__GlobalIDL._d_EchoList  = (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0)
_0__GlobalIDL._ad_EchoList = (omniORB.tcInternal.tv_alias, EchoList._NP_RepositoryId, "EchoList", (omniORB.tcInternal.tv_sequence, (omniORB.tcInternal.tv_string,0), 0))
_0__GlobalIDL._tc_EchoList = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._ad_EchoList)
omniORB.registerType(EchoList._NP_RepositoryId, _0__GlobalIDL._ad_EchoList, _0__GlobalIDL._tc_EchoList)
del EchoList

# typedef ... ValueList
class ValueList:
    _NP_RepositoryId = "IDL:ValueList:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0__GlobalIDL.ValueList = ValueList
_0__GlobalIDL._d_ValueList  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0)
_0__GlobalIDL._ad_ValueList = (omniORB.tcInternal.tv_alias, ValueList._NP_RepositoryId, "ValueList", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_float, 0))
_0__GlobalIDL._tc_ValueList = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._ad_ValueList)
omniORB.registerType(ValueList._NP_RepositoryId, _0__GlobalIDL._ad_ValueList, _0__GlobalIDL._tc_ValueList)
del ValueList

# interface MyServiceT
_0__GlobalIDL._d_MyServiceT = (omniORB.tcInternal.tv_objref, "IDL:MyServiceT:1.0", "MyServiceT")
omniORB.typeMapping["IDL:MyServiceT:1.0"] = _0__GlobalIDL._d_MyServiceT
_0__GlobalIDL.MyServiceT = omniORB.newEmptyClass()
class MyServiceT :
    _NP_RepositoryId = _0__GlobalIDL._d_MyServiceT[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0__GlobalIDL.MyServiceT = MyServiceT
_0__GlobalIDL._tc_MyServiceT = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_MyServiceT)
omniORB.registerType(MyServiceT._NP_RepositoryId, _0__GlobalIDL._d_MyServiceT, _0__GlobalIDL._tc_MyServiceT)

# MyServiceT operations and attributes
MyServiceT._d_echo = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
MyServiceT._d_get_echo_history = ((), (omniORB.typeMapping["IDL:EchoList:1.0"], ), None)
MyServiceT._d_set_value = ((omniORB.tcInternal.tv_float, ), (), None)
MyServiceT._d_get_value = ((), (omniORB.tcInternal.tv_float, ), None)
MyServiceT._d_get_value_history = ((), (omniORB.typeMapping["IDL:ValueList:1.0"], ), None)

# MyServiceT object reference
class _objref_MyServiceT (CORBA.Object):
    _NP_RepositoryId = MyServiceT._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def echo(self, *args):
        return _omnipy.invoke(self, "echo", _0__GlobalIDL.MyServiceT._d_echo, args)

    def get_echo_history(self, *args):
        return _omnipy.invoke(self, "get_echo_history", _0__GlobalIDL.MyServiceT._d_get_echo_history, args)

    def set_value(self, *args):
        return _omnipy.invoke(self, "set_value", _0__GlobalIDL.MyServiceT._d_set_value, args)

    def get_value(self, *args):
        return _omnipy.invoke(self, "get_value", _0__GlobalIDL.MyServiceT._d_get_value, args)

    def get_value_history(self, *args):
        return _omnipy.invoke(self, "get_value_history", _0__GlobalIDL.MyServiceT._d_get_value_history, args)

    __methods__ = ["echo", "get_echo_history", "set_value", "get_value", "get_value_history"] + CORBA.Object.__methods__

omniORB.registerObjref(MyServiceT._NP_RepositoryId, _objref_MyServiceT)
_0__GlobalIDL._objref_MyServiceT = _objref_MyServiceT
del MyServiceT, _objref_MyServiceT

# MyServiceT skeleton
__name__ = "_GlobalIDL__POA"
class MyServiceT (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.MyServiceT._NP_RepositoryId


    _omni_op_d = {"echo": _0__GlobalIDL.MyServiceT._d_echo, "get_echo_history": _0__GlobalIDL.MyServiceT._d_get_echo_history, "set_value": _0__GlobalIDL.MyServiceT._d_set_value, "get_value": _0__GlobalIDL.MyServiceT._d_get_value, "get_value_history": _0__GlobalIDL.MyServiceT._d_get_value_history}

MyServiceT._omni_skeleton = MyServiceT
_0__GlobalIDL__POA.MyServiceT = MyServiceT
del MyServiceT
__name__ = "_GlobalIDL"

# interface MyServiceOpen
_0__GlobalIDL._d_MyServiceOpen = (omniORB.tcInternal.tv_objref, "IDL:MyServiceOpen:1.0", "MyServiceOpen")
omniORB.typeMapping["IDL:MyServiceOpen:1.0"] = _0__GlobalIDL._d_MyServiceOpen
_0__GlobalIDL.MyServiceOpen = omniORB.newEmptyClass()
class MyServiceOpen :
    _NP_RepositoryId = _0__GlobalIDL._d_MyServiceOpen[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0__GlobalIDL.MyServiceOpen = MyServiceOpen
_0__GlobalIDL._tc_MyServiceOpen = omniORB.tcInternal.createTypeCode(_0__GlobalIDL._d_MyServiceOpen)
omniORB.registerType(MyServiceOpen._NP_RepositoryId, _0__GlobalIDL._d_MyServiceOpen, _0__GlobalIDL._tc_MyServiceOpen)

# MyServiceOpen operations and attributes
MyServiceOpen._d_AdOpen = ((), (), None)

# MyServiceOpen object reference
class _objref_MyServiceOpen (CORBA.Object):
    _NP_RepositoryId = MyServiceOpen._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def AdOpen(self, *args):
        return _omnipy.invoke(self, "AdOpen", _0__GlobalIDL.MyServiceOpen._d_AdOpen, args)

    __methods__ = ["AdOpen"] + CORBA.Object.__methods__

omniORB.registerObjref(MyServiceOpen._NP_RepositoryId, _objref_MyServiceOpen)
_0__GlobalIDL._objref_MyServiceOpen = _objref_MyServiceOpen
del MyServiceOpen, _objref_MyServiceOpen

# MyServiceOpen skeleton
__name__ = "_GlobalIDL__POA"
class MyServiceOpen (PortableServer.Servant):
    _NP_RepositoryId = _0__GlobalIDL.MyServiceOpen._NP_RepositoryId


    _omni_op_d = {"AdOpen": _0__GlobalIDL.MyServiceOpen._d_AdOpen}

MyServiceOpen._omni_skeleton = MyServiceOpen
_0__GlobalIDL__POA.MyServiceOpen = MyServiceOpen
del MyServiceOpen
__name__ = "_GlobalIDL"

#
# End of module "_GlobalIDL"
#
__name__ = "MyService_idl"

_exported_modules = ( "_GlobalIDL", )

# The end.
