cmake_minimum_required(VERSION 2.8 FATAL_ERROR)
if(POLICY CMP0048)
  cmake_policy(SET CMP0048 OLD)
endif()

project(${rtcParam.name})
string(TOLOWER ${dol}{PROJECT_NAME} PROJECT_NAME_LOWER)
include("${dol}{PROJECT_SOURCE_DIR}/cmake/utils.cmake")
set(PROJECT_VERSION ${rtcParam.version} CACHE STRING "${rtcParam.name} version")
DISSECT_VERSION()
set(PROJECT_DESCRIPTION "${rtcParam.description}")
set(PROJECT_VENDOR "${rtcParam.vender}")
set(PROJECT_AUTHOR "${rtcParam.vender}")
set(PROJECT_AUTHOR_SHORT "${rtcParam.vender}")

set(PROJECT_MAINTAINER "Noriaki Ando <n-ando@aist.go.jp>")
set(PROJECT_TYPE "c++/opencv-rtcs")

${sharp} Add an "uninstall" target
CONFIGURE_FILE ("${dol}{PROJECT_SOURCE_DIR}/cmake/uninstall_target.cmake.in"
    "${dol}{PROJECT_BINARY_DIR}/uninstall_target.cmake" IMMEDIATE @ONLY)
ADD_CUSTOM_TARGET (${dol}{PROJECT_NAME}_uninstall "${dol}{CMAKE_COMMAND}" -P
    "${dol}{PROJECT_BINARY_DIR}/uninstall_target.cmake")

${sharp}option(BUILD_EXAMPLES "Build and install examples" OFF)
option(BUILD_DOCUMENTATION "Build the documentation" OFF)
${sharp}option(BUILD_TESTS "Build the tests" OFF)
${sharp}option(BUILD_TOOLS "Build the tools" OFF)
option(BUILD_IDL "Build and install idl" ON)
option(BUILD_SOURCES "Build and install sources" OFF)

option(STATIC_LIBS "Build static libraries" OFF)
if(STATIC_LIBS)
    set(LIB_TYPE STATIC)
else(STATIC_LIBS)
    set(LIB_TYPE SHARED)
endif(STATIC_LIBS)

if (${dol}{CMAKE_SYSTEM_NAME} MATCHES "Darwin")
   ${sharp} Mac OS X specific code
   SET(CMAKE_CXX_COMPILER "g++")
endif (${dol}{CMAKE_SYSTEM_NAME} MATCHES "Darwin")


${sharp} Set up installation directories
if(WIN32)
   set(INSTALL_PREFIX "components/${dol}{PROJECT_TYPE}")
else(WIN32)
   set(OPENRTM_SHARE_PREFIX "share/openrtm-${dol}{PROJECT_VERSION_MAJOR}.${dol}{PROJECT_VERSION_MINOR}")
   set(INSTALL_PREFIX "${dol}{OPENRTM_SHARE_PREFIX}/components/${dol}{PROJECT_TYPE}")
endif(WIN32)
       
${sharp} Get necessary dependency information
find_package(OpenRTM)

${sharp} Universal settings
${sharp}enable_testing()

${sharp} Subdirectories
add_subdirectory(cmake)
if(BUILD_DOCUMENTATION)
    add_subdirectory(doc)
endif(BUILD_DOCUMENTATION)

${sharp}if(BUILD_EXAMPLES)
${sharp}    add_subdirectory(examples)
${sharp}endif(BUILD_EXAMPLES)

if(BUILD_IDL)
    add_subdirectory(idl)
endif(BUILD_IDL)

add_subdirectory(include)
MAP_ADD_STR(headers  "include/" comp_hdrs)
add_subdirectory(src)

${sharp}if(BUILD_TESTS)
${sharp}    add_subdirectory(test)
${sharp}endif(BUILD_TESTS)

${sharp}if(BUILD_TOOLS)
${sharp}    add_subdirectory(tools)
${sharp}endif(BUILD_TOOLS)

if(BUILD_SOURCES)
    add_subdirectory(include)
    add_subdirectory(src)
endif(BUILD_SOURCES)

${sharp} Package creation
${sharp} By default, do not warn when built on machines using only VS Express:
IF(NOT DEFINED CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS)
SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS ON)
ENDIF()
include(InstallRequiredSystemLibraries)
set(PROJECT_EXECUTABLES ${dol}{PROJECT_NAME_LOWER}Comp
    "${dol}{PROJECT_NAME_LOWER}Comp")

set(cpack_options "${dol}{PROJECT_BINARY_DIR}/cpack_options.cmake")

configure_file("${dol}{PROJECT_SOURCE_DIR}/cmake/cpack_options.cmake.in"
    ${dol}{cpack_options} @ONLY)

set(CPACK_PROJECT_CONFIG_FILE ${dol}{cpack_options})
include(${dol}{CPACK_PROJECT_CONFIG_FILE})
include(CPack)


