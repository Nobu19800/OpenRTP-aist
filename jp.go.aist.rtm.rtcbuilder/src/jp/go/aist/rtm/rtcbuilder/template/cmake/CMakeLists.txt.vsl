cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

project(${rtcParam.name})

set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS true)
set(CMAKE_MODULE_PATH "${dol}{PROJECT_SOURCE_DIR}/cmake_modules")

set(LINUX_PACKAGE_GENERATOR "DEB")
${sharp}set(LINUX_PACKAGE_GENERATOR "RPM")


${sharp} component settings
set(RTC_NAME "${dol}{PROJECT_NAME}")
set(RTC_VERSION "${rtcParam.version}")
set(RTC_VERSION_MAJOR "${helper.getVerMajor(${rtcParam.version})}")
set(RTC_VERSION_MINOR "${helper.getVerMinor(${rtcParam.version})}")
set(RTC_VERSION_PATCH "${helper.getVerPatch(${rtcParam.version})}")
set(RTC_LANG "${helper.toLower(${rtcParam.language})}")
set(RTC_DESCRIPTION "${rtcParam.description}")
set(RTC_VENDOR "${rtcParam.vender}")
set(RTC_MAINTAINER "author@example.com")

string(TOLOWER ${dol}{RTC_NAME} PACKAGE_NAME)
set(PACKAGE_VERSION "${dol}{RTC_VERSION_MAJOR}.${dol}{RTC_VERSION_MINOR}.${dol}{RTC_VERSION_PATCH}")

set(IDL_FILES ""
#foreach($p in ${rtcParam.providerIdlPathes})
              ${p.idlFile}
#end
#foreach($p in ${rtcParam.consumerIdlPathes})
              ${p.idlFile}
#end)

set(SKEL_SRCS ""
#foreach($p in ${rtcParam.providerIdlPathes})
              ${helper.toSvcSkel(${p.idlFile})}.cpp
#end)

set(STUB_SRCS ""
#foreach($p in ${rtcParam.consumerIdlPathes})
              ${helper.toSvcStub(${p.idlFile})}.cpp
#end)

set(IMPL_SRCS ""
#foreach($p in ${rtcParam.providerIdlPathes})
              ${helper.toSvcImpl(${p.idlFile})}.cpp
#end)

set(IMPL_INCS ""
#foreach($p in ${rtcParam.providerIdlPathes})
              ${helper.toSvcImpl(${p.idlFile})}.h
#end)

set(LIBS_SRCS ${rtcParam.name}.cpp)

set(LIBS_INCS ${rtcParam.name}.h)

set(EXEC_SRCS ${rtcParam.name}Comp.cpp)

set(OTHER_SRCS CMakeLists.txt Doxyfile.in
               RTC.xml ${rtcParam.name}.conf rtc.conf)


${sharp} check OpenRTM installed
find_package(OpenRTM REQUIRED)

list(APPEND CFLAGS ${dol}{OMNIORB_CFLAGS} ${dol}{OPENRTM_CFLAGS})
list(APPEND INCLUDE_DIRS ${dol}{OMNIORB_INCLUDE_DIRS} ${dol}{OPENRTM_INCLUDE_DIRS})
list(APPEND LDFLAGS ${dol}{OMNIORB_LDFLAGS} ${dol}{OPENRTM_LDFLAGS})
list(APPEND LIBRARY_DIRS ${dol}{OMNIORB_LIBRARY_DIRS} ${dol}{OPENRTM_LIBRARY_DIRS})
list(APPEND LIBRARIES ${dol}{OMNIORB_LIBRARIES} ${dol}{OPENRTM_LIBRARIES})

${sharp} check doxygen installed
find_package(Doxygen)
if(DOXYGEN_FOUND STREQUAL "NO")
    message(FATAL_ERROR "Doxygen not found.")
endif()


if(WIN32)
    ${sharp} add command path
    set(${dol}ENV{PATH} ${dol}ENV{PATH} "${dol}{OPENRTM_DIR}/bin")
    set(${dol}ENV{PATH} ${dol}ENV{PATH} "${dol}{OMNIORB_DIR}/bin/x86_win32")
    ${sharp} set install path prefix
    set(CMAKE_INSTALL_PREFIX "${dol}{OPENRTM_DIR}")
    set(INSTALL_PREFIX "components/${dol}{RTC_LANG}/${dol}{PACKAGE_NAME}${dol}{PACKAGE_VERSION}")
else()
    ${sharp} add command path
    set(${dol}ENV{PATH} ${dol}ENV{PATH} "${dol}{OPENRTM_DIR}/bin")
    set(${dol}ENV{PATH} ${dol}ENV{PATH} "${dol}{OMNIORB_DIR}/bin")
    ${sharp} set install path prefix
    set(CMAKE_INSTALL_PREFIX "${dol}{OPENRTM_DIR}")
    set(OPENRTM_SHARE_PREFIX "share/openrtm-${dol}{OPENRTM_VERSION_MAJOR}.${dol}{OPENRTM_VERSION_MINOR}")
    set(INSTALL_PREFIX "${dol}{OPENRTM_SHARE_PREFIX}/components/${dol}{RTC_LANG}/${dol}{PACKAGE_NAME}${dol}{PACKAGE_VERSION}")
endif()


${sharp} add uninstall target
configure_file(
    "${dol}{CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/cmake_uninstall.cmake.in"
    "${dol}{CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
    IMMEDIATE @ONLY)
add_custom_target(uninstall COMMAND 
    ${dol}{CMAKE_COMMAND} -P ${dol}{CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)


${sharp} target settings for library/executable
include_directories(${dol}{INCLUDE_DIRS})

link_directories(${dol}{LIBRARY_DIRS})

add_definitions(${dol}{CFLAGS})
add_definitions(-I${dol}{CMAKE_CURRENT_BINARY_DIR})

foreach(idl ${dol}{IDL_FILES})
    string(REGEX REPLACE "([^\\/]*)\\.idl" "\\1" idl_base ${dol}{idl})
    add_custom_command(OUTPUT ${dol}{idl_base}Stub.cpp ${dol}{idl_base}Skel.cpp
                       COMMAND ${dol}{OPENRTM_IDL_WRAPPER} ${dol}{OPENRTM_IDL_WRAPPER_FLAGS} --idl-file=${dol}{idl}
                       COMMAND ${dol}{OPENRTM_IDLC} ${dol}{OPENRTM_IDLFLAGS} ${dol}{PROJECT_SOURCE_DIR}/${dol}{idl}
                       DEPENDS ${dol}{idl})
endforeach()

if(CMAKE_COMPILER_IS_GNUCC)
    string(REPLACE ";" " " LDFLAGS "${LDFLAGS}")
endif()

add_library(${dol}{RTC_NAME} SHARED
            ${dol}{LIBS_SRCS} ${dol}{IMPL_SRCS} ${dol}{SKEL_SRCS} ${dol}{STUB_SRCS})
target_link_libraries(${dol}{RTC_NAME} ${dol}{LIBRARIES})
set_target_properties(${dol}{RTC_NAME} PROPERTIES PREFIX "")
set_target_properties(${dol}{RTC_NAME} PROPERTIES LINK_FLAGS "${dol}{LDFLAGS}")

if(UNIX)
    add_library(${dol}{RTC_NAME}-static STATIC
                ${dol}{LIBS_SRCS} ${dol}{IMPL_SRCS} ${dol}{SKEL_SRCS} ${dol}{STUB_SRCS})
    target_link_libraries(${dol}{RTC_NAME}-static ${dol}{LIBRARIES})
    set_target_properties(${dol}{RTC_NAME}-static PROPERTIES PREFIX "")
    set_target_properties(${dol}{RTC_NAME}-static PROPERTIES LINK_FLAGS "${dol}{LDFLAGS}")
endif()

if(UNIX)
    add_executable(${dol}{RTC_NAME}Comp ${dol}{EXEC_SRCS})
    add_dependencies(${dol}{RTC_NAME}Comp ${dol}{RTC_NAME}-static)
    target_link_libraries(${dol}{RTC_NAME}Comp ${dol}{RTC_NAME}-static ${dol}{LIBRARIES})

    add_executable(${dol}{RTC_NAME}Comp-dynamic ${dol}{EXEC_SRCS})
    add_dependencies(${dol}{RTC_NAME}Comp-dynamic ${dol}{RTC_NAME})
    target_link_libraries(${dol}{RTC_NAME}Comp-dynamic ${dol}{RTC_NAME} ${dol}{LIBRARIES})
    set_target_properties(${dol}{RTC_NAME}Comp-dynamic PROPERTIES LINK_FLAGS "${dol}{LDFLAGS}")

else()
    add_executable(${dol}{RTC_NAME}Comp ${dol}{EXEC_SRCS})
    add_dependencies(${dol}{RTC_NAME}Comp ${dol}{RTC_NAME})
    target_link_libraries(${dol}{RTC_NAME}Comp ${dol}{RTC_NAME} ${dol}{LIBRARIES})
    set_target_properties(${dol}{RTC_NAME}Comp PROPERTIES LINK_FLAGS "${dol}{LDFLAGS}")
endif()

install(TARGETS ${dol}{RTC_NAME} LIBRARY DESTINATION "${dol}{INSTALL_PREFIX}"
                            ARCHIVE DESTINATION "${dol}{INSTALL_PREFIX}"
                            RUNTIME DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT "applications")
install(TARGETS ${dol}{RTC_NAME}Comp RUNTIME DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT "applications")
install(FILES RTC.xml DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT "applications")


${sharp} target settings for document
configure_file("${dol}{CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in"
               "${dol}{CMAKE_CURRENT_BINARY_DIR}/Doxyfile")

add_custom_target(doxygen COMMAND
                  ${dol}{DOXYGEN_EXECUTABLE} ${dol}{CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES doc)

get_target_property(DOC_TARGET doc TYPE)
if(NOT DOC_TARGET)
    add_custom_target(doc)
endif()
add_dependencies(doc doxygen)

install(DIRECTORY ${dol}{CMAKE_CURRENT_BINARY_DIR}/doc DESTINATION "${dol}{INSTALL_PREFIX}"
        COMPONENT "documents")


${sharp} install source files
install(FILES ${dol}{IDL_FILES} ${dol}{IMPL_SRCS} ${dol}{IMPL_INCS}
        DESTINATION "${dol}{INSTALL_PREFIX}/src"
        COMPONENT "sources")

install(FILES ${dol}{LIBS_SRCS} ${dol}{LIBS_INCS} ${dol}{EXEC_SRCS}
        DESTINATION "${dol}{INSTALL_PREFIX}/src"
        COMPONENT "sources")

install(FILES ${dol}{OTHER_SRCS}
        DESTINATION "${dol}{INSTALL_PREFIX}/src"
        COMPONENT "sources")

install(DIRECTORY cmake_modules cpack_resources
        DESTINATION "${dol}{INSTALL_PREFIX}/src"
        COMPONENT "sources")


${sharp} package settings
set(CPACK_PACKAGE_NAME "${dol}{RTC_NAME}")
set(CPACK_PACKAGE_VERSION_MAJOR "${dol}{RTC_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${dol}{RTC_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${dol}{RTC_VERSION_PATCH}")
set(CPACK_PACKAGE_VERSION "${dol}{CPACK_PACKAGE_VERSION_MAJOR}.${dol}{CPACK_PACKAGE_VERSION_MINOR}.${dol}{CPACK_PACKAGE_VERSION_PATCH}")
set(CPACK_PACKAGE_VENDOR "${dol}{RTC_VENDOR}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${dol}{RTC_DESCRIPTION}")
set(CPACK_PACKAGE_CONTACT "${dol}{RTC_MAINTAINER}")

set(CPACK_RESOURCE_FILE_LICENSE
    "${dol}{CMAKE_CURRENT_SOURCE_DIR}/cpack_resources/License.txt")
set(CPACK_PACKAGE_DESCRIPTION_FILE
    "${dol}{CMAKE_CURRENT_SOURCE_DIR}/cpack_resources/Description.txt")

set(CPACK_COMPONENTS_ALL applications documents sources)
set(CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME "Applications")
set(CPACK_COMPONENT_APPLICATIONS_DESCRIPTION "RT-Component applications")
set(CPACK_COMPONENT_APPLICATIONS_DISABLED FALSE)

set(CPACK_COMPONENT_DOCUMENTS_DISPLAY_NAME "Documents")
set(CPACK_COMPONENT_DOCUMENTS_DESCRIPTION "RT-Component documents")
set(CPACK_COMPONENT_DOCUMENTS_DISABLED TRUE)

set(CPACK_COMPONENT_SOURCES_DISPLAY_NAME "Source files")
set(CPACK_COMPONENT_SOURCES_DESCRIPTION "RT-Component source files")
set(CPACK_COMPONENT_SOURCES_DISABLED TRUE)

if(WIN32)
    set(CPACK_GENERATOR "WIX")

    ${sharp} Windows WiX package settings

    set(CPACK_WIX_XSL "@CMAKE_CURRENT_BINARY_DIR@/wix.xsl")
    set(CPACK_WIX_LANG "ja-jp")
    set(CPACK_RESOURCE_FILE_LICENSE
        "@CMAKE_CURRENT_SOURCE_DIR@/cpack_resources/License.rtf")
    configure_file(
        "${dol}{CMAKE_CURRENT_SOURCE_DIR}/cpack_resources/wix.xsl.in"
        "${dol}{CMAKE_CURRENT_BINARY_DIR}/wix.xsl" @ONLY)

    set(CPACK_PACKAGE_FILE_NAME
        "rtc${dol}{OPENRTM_VERSION}-${dol}{PACKAGE_NAME}${dol}{PACKAGE_VERSION}")

else()
    set(CPACK_GENERATOR "${dol}{LINUX_PACKAGE_GENERATOR}")

    if(CPACK_GENERATOR STREQUAL "DEB")
        ${sharp} Linux Debian package settings

        set(CPACK_DEBIAN_PACKAGE_VERSION "${dol}{CPACK_PACKAGE_VERSION}-1")
        set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "i386")
        set(CPACK_DEBIAN_PACKAGE_SECTION "main")
        set(CPACK_DEBIAN_PACKAGE_PRIORITY  "extra")
        set(CPACK_DEBIAN_PACKAGE_DEPENDS "openrtm-aist (>= ${rtcParam.rtmVersion})")

        set(CPACK_PACKAGE_FILE_NAME
            "rtc${dol}{OPENRTM_VERSION}-${dol}{PACKAGE_NAME}_${dol}{CPACK_DEBIAN_PACKAGE_VERSION}_${dol}{CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")

    elseif(CPACK_GENERATOR STREQUAL "RPM")
        ${sharp} Linux RPM package settings

        set(CPACK_RPM_PACKAGE_RELEASE "1.fc10")
        set(CPACK_RPM_PACKAGE_ARCHITECTURE "i386")
        set(CPACK_RPM_PACKAGE_GROUP "Development/Libraries")
        set(CPACK_RPM_PACKAGE_LICENSE "LGPL")
        set(CPACK_RPM_PACKAGE_REQUIRES "OpenRTM-aist >= ${rtcParam.rtmVersion}")

        set(CPACK_PACKAGE_FILE_NAME
            "rtc${dol}{OPENRTM_VERSION}-${dol}{PACKAGE_NAME}-${dol}{PACKAGE_VERSION}-${dol}{CPACK_RPM_PACKAGE_RELEASE}.${dol}{CPACK_RPM_PACKAGE_ARCHITECTURE}")

    endif()
endif()

message(STATUS "Package type: ${dol}{CPACK_GENERATOR}")
message(STATUS "Package name: ${dol}{CPACK_PACKAGE_FILE_NAME}")

include(CPack)
