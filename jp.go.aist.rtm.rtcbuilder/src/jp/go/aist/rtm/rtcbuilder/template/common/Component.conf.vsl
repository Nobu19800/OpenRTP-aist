${sharp} -*- sh -*-
${sharp}------------------------------------------------------------
${sharp} Configuration file for ${rtcParam.name}
${sharp}
${sharp} This configuration file name should be specified in rtc.conf (or other
${sharp} configuration file specified by -f option) by "config_file" property.
${sharp}
${sharp} ${rtcParam.category}.${rtcParam.name}.config_file: ${rtcParam.name}.conf
${sharp} or
${sharp} ${rtcParam.category}.${rtcParam.name}0.config_file: ${rtcParam.name}0.conf
${sharp} ${rtcParam.category}.${rtcParam.name}1.config_file: ${rtcParam.name}1.conf
${sharp} ${rtcParam.category}.${rtcParam.name}2.config_file: ${rtcParam.name}2.conf
${sharp}
${sharp} ------------------------------------------------------------
${sharp} An example configuration file for ${rtcParam.name}
${sharp}
${sharp} See details in the following reference manual
${sharp}

${sharp} Execution context configuration
${sharp} exec_cxt.periodic.type: PeriodicExecutionContext
${sharp} exec_cxt.periodic.rate: 1000
${sharp}
${sharp}
${sharp} configuration.active_config: mode0

${sharp} Configuration-set example
${sharp}
#if( ${rtcParam.configParams.size()} > 0 )
#foreach($configParam in ${rtcParam.configParams})  
${sharp} conf.default.${configParam.name}: ${configParam.defaultVal}
#end
${sharp}
${sharp} Additional configuration-set example named "mode0"
${sharp}
#foreach($configParam in ${rtcParam.configParams})  
${sharp} conf.mode0.${configParam.name}: ${configParam.defaultVal}
#end
${sharp}
${sharp} Other configuration set named "mode1"
${sharp}
#foreach($configParam in ${rtcParam.configParams})  
${sharp} conf.mode1.${configParam.name}: ${configParam.defaultVal}
#end
#else
${sharp} Additional configuration-set example named "mode0"
${sharp}
${sharp} conf.mode0.int_param0: 0
${sharp} conf.mode0.int_param1: 1
${sharp} conf.mode0.double_param0: 0.99
${sharp} conf.mode0.double_param1: -0.99
${sharp} conf.mode0.str_param0: default
${sharp} conf.mode0.str_param1: default set in conf file
${sharp} conf.mode0.vector_param0: 0.0,0.1,0.2,0.3,0.4,0.5,0.6
${sharp}
${sharp} Other configuration set named "mode1"
${sharp}
${sharp} conf.mode1.int_param0: 0
${sharp} conf.mode1.int_param1: 1
${sharp} conf.mode1.double_param0: 0.99
${sharp} conf.mode1.double_param1: -0.99
${sharp} conf.mode1.str_param0: default
${sharp} conf.mode1.str_param1: default set in conf file
${sharp} conf.mode1.vector_param0: 0.0,0.1,0.2,0.3,0.4,0.5,0.6
#end

${sharp}${sharp}============================================================
${sharp}${sharp} Component configuration reference
${sharp}${sharp}

${sharp}${sharp}============================================================
${sharp}${sharp} Active configuration-set
${sharp}${sharp}============================================================
${sharp}${sharp}
${sharp}${sharp} Initial active configuration-set. The following "mode0" is a
${sharp}${sharp} configuration-set name.  A configuration-set named "mode0" should be
${sharp}${sharp} appear in this configuration file as follows.
${sharp}${sharp}
${sharp}${sharp} configuration.active_config: mode0
${sharp}${sharp}
${sharp} conf.mode0.param0: hoge
${sharp} conf.mode0.param1: fuga
${sharp} conf.mode0.param2: munya

${sharp}${sharp}============================================================
${sharp}${sharp} GUI control option for RTSystemEditor
${sharp}${sharp}============================================================
${sharp}${sharp} Available GUI control options [__widget__]:
${sharp}${sharp}
${sharp}${sharp} - text:          text box [default].
${sharp}${sharp} - slider.<step>: Horizontal slider. <step> is step for the slider.
${sharp}${sharp}                  A range constraints option is required. 
${sharp}${sharp} - spin:          Spin button. A range constraitns option is required.
${sharp}${sharp} - radio:         Radio button. An enumeration constraints is required.
${sharp}${sharp} - checkbox:      Checkbox control. An enumeration constraints is
${sharp}${sharp}                  required. The parameter has to be able to accept a
${sharp}${sharp}                  comma separated list.
${sharp}${sharp} - orderd_list:   Orderd list control.  An enumeration constraint is
${sharp}${sharp}                  required. The parameter has to be able to accept a
${sharp}${sharp}                  comma separated list. In this control, Enumerated
${sharp}${sharp}                  elements can appear one or more times in the given list.
${sharp}${sharp}
${sharp}${sharp} Available GUI control constraint options [__constraints__]:
${sharp}${sharp}
${sharp}${sharp} - none:         blank
${sharp}${sharp} - direct value: 100 (constant value)
${sharp}${sharp} - range:        <, >, <=, >= can be used.
${sharp}${sharp} - enumeration:  (enum0, enum1, ...)
${sharp}${sharp} - array:        <constraints0>, ,constraints1>, ... for only array value
${sharp}${sharp} - hash:         {key0: value0, key1:, value0, ...}
${sharp}${sharp}
#if(${tmpltHelper.checkNotWidget(${rtcParam})})
${sharp}${sharp} examples:
${sharp} conf.__widget__.int_param0: slider.10
${sharp} conf.__widget__.int_param1: spin
${sharp} conf.__widget__.double_param0: slider.10
${sharp} conf.__widget__.double_param1: text
${sharp} conf.__widget__.str_param0: radio
${sharp} conf.__widget__.vector_param0: checkbox
${sharp} conf.__widget__.vector_param1: orderd_list
#else
#foreach($configParam in ${rtcParam.configParams})
#if( ${configParam.widget.length()} > 0 )
${sharp} conf.__widget__.${configParam.name}, ${configParam.widget}#if( ${configParam.step.length()} > 0 ).${configParam.step}#end

#end
#end
#end


#if(${tmpltHelper.checkNotConstraint(${rtcParam})})
${sharp} conf.__constraints__.int_param0: 0<=x<=150
${sharp} conf.__constraints__.int_param1: 0<=x<=1000
${sharp} conf.__constraints__.double_param0: 0<=x<=100
${sharp} conf.__constraints__.double_param1:
${sharp} conf.__constraints__.str_param0: (default,mode0,mode1)
${sharp} conf.__constraints__.vector_param0: (dog,monky,pheasant,cat)
${sharp} conf.__constraints__.vector_param1: (pita,gora,switch)
#else
#foreach($configParam in ${rtcParam.configParams})
#if( ${configParam.constraint.length()} > 0 )
${sharp} conf.__constraints__.${configParam.name}, ${configParam.constraint}
#end
#end
#end

#if( ${rtcParam.configParams.size()} > 0 )
#foreach($configParam in ${rtcParam.configParams})
${sharp} conf.__type__.${configParam.name}: ${configParam.type}
#end
#end

${sharp}${sharp}============================================================
${sharp}${sharp} Execution context settings
${sharp}${sharp}============================================================
${sharp}${sharp}
${sharp}${sharp} Periodic type ExecutionContext
${sharp}${sharp}
${sharp}${sharp} Other availabilities in OpenRTM-aist
${sharp}${sharp}
${sharp}${sharp} - ExtTrigExecutionContext: External triggered EC. It is embedded in
${sharp}${sharp}                            OpenRTM library.
${sharp}${sharp} - OpenHRPExecutionContext: External triggred paralell execution
${sharp}${sharp}                            EC. It is embedded in OpenRTM
${sharp}${sharp}                            library. This is usually used with
${sharp}${sharp}                            OpenHRP3.
${sharp}${sharp} - RTPreemptEC:             Real-time execution context for Linux
${sharp}${sharp}                            RT-preemptive pathed kernel.
${sharp}${sharp} - ArtExecutionContext:     Real-time execution context for ARTLinux
${sharp}${sharp}                            (http://sourceforge.net/projects/art-linux/)
${sharp}${sharp}
#if(${tmpltHelper.checkPeriodicType(${rtcParam})})
exec_cxt.periodic.type:${tmpltHelper.getPeriodicTypeValue(${rtcParam})}
#else
${sharp} exec_cxt.periodic.type: PeriodicExecutionContext
#end

${sharp}${sharp}
${sharp}${sharp} The execution cycle of ExecutionContext
${sharp}${sharp}
#if(${rtcParam.executionRate}>0)exec_cxt.periodic.rate:${rtcParam.executionRate}
#else
${sharp} exec_cxt.periodic.rate: 1000
#end

#if( ${rtcParam.configParameterParams.size()} > 0 )
#foreach($parameterParam in ${rtcParam.configParameterParams})  
#if(${tmpltHelper.checkNotPeriodicTypeParam(${parameterParam})})
${parameterParam.configName}:${parameterParam.defaultVal}
#end
#end
#end