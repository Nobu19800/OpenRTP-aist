// -*- C++ -*-
/*!
 * @file  ${rtcParam.name}FSM.h
 * @date  ${dol}Date${dol}
 * ${dol}Id${dol}
 */

${sharp}ifndef ${rtcParam.name.toUpperCase()}FSM_H
${sharp}define ${rtcParam.name.toUpperCase()}FSM_H

${sharp}include <rtm/StaticFSM.h>
${sharp}include <rtm/idl/BasicDataTypeSkel.h>
${sharp}include <rtm/RTC.h>

class ${rtcParam.name};

namespace ${rtcParam.name}Fsm {

  /*!
   * @if jp
   * @class TOP状態
   *
   *
   * @else
   * @brief TOP state
   *
   * @endif
   */
  FSM_TOPSTATE(${fsmParam.name}) {
    // Top state variables (visible to all substates)
#if( ${fsmParam.dataName.length()} > 0 )
    struct ${fsmParam.dataName} {
      ${fsmParam.dataName}() {}
    };
#end
  
    FSM_STATE(${fsmParam.name});

    // Machine's event protocol
#foreach($eachTrans in ${fsmParam.getAllTransList()})
#if( ${eachTrans.event.length()} > 0 )
    virtual void ${eachTrans.event}() {}
#end
#end
  
   private:
     RTC::ReturnCode_t onInit() override;
     RTC::ReturnCode_t onEntry() override;
     RTC::ReturnCode_t onExit() override;
  };

#foreach($eachState in ${fsmParam.getAllValidStateList()})
  FSM_SUBSTATE(${eachState.name}, ${eachState.parentName}) {
#if( ${eachState.dataName.length()} > 0 )
    struct ${eachState.dataName} {
      ${eachState.dataName}() {}
    };
#end
    FSM_STATE(${eachState.name});
${tmpltHelper.getHistory(${eachState})}

    // Event handler
#foreach($eachTrans in ${eachState.getTransList()})
#if( ${eachTrans.event.length()} > 0 )
    void ${eachTrans.event}() override;
#end
#end

    private:
#if( ${eachState.hasEntry} )       RTC::ReturnCode_t onEntry() override;
#end
#if( ${eachState.hasExit} )       RTC::ReturnCode_t onExit() override;
#end
  };

#end

} //end namespace '${rtcParam.name}FSM'

#endif // ${rtcParam.name.toUpperCase()}FSM_H
