// -*- C++ -*-
/*!
 * @file  ${rtcParam.name}FSM.h
 * @date  ${dol}Date${dol}
 * ${dol}Id${dol}
 */

${sharp}ifndef ${rtcParam.name.toUpperCase()}_FSM_H
${sharp}define ${rtcParam.name.toUpperCase()}_FSM_H

${sharp}include <rtm/idl/BasicDataTypeSkel.h>
${sharp}include <rtm/idl/ExtendedDataTypesSkel.h>
${sharp}include <rtm/idl/InterfaceDataTypesSkel.h>

class Fsm;

namespace ${rtcParam.name}FSM {

// Machine's top state
TOPSTATE(${fsmParam.name}) {
  // Top state variables (visible to all substates)
#if( ${fsmParam.dataName.length()} > 0 )
  struct ${fsmParam.dataName} {
    ${fsmParam.dataName}() {}
  };
#end
  
  STATE(${fsmParam.name})

  static void set_component(Fsm* component);
  static void notify_fsm_state_changed(const char* state);

  // Event handler
#foreach($eachTrans in ${fsmParam.getAllTransList()})
  virtual void ${eachTrans.event}(RTC::TimedLong param);
#end
  
 protected:
   void init();
   void entry();
   void exit();
};

#foreach($eachState in ${fsmParam.getAllStateList()})
SUBSTATE(${eachState.name}, ${eachState.parentName}) {
#if( ${eachState.dataName.length()} > 0 )
  struct ${eachState.dataName} {
    ${eachState.dataName}() {}
  };
#end
  STATE(${eachState.name})
${tmpltHelper.getHistory(${eachState})}
#foreach($eachTrans in ${eachState.getTransList()})
  void ${eachTrans.event}(RTC::TimedLong param);
#end

private:
   void init();
#if( ${eachState.hasEntry} )   void entry();
#end
#if( ${eachState.hasExit} )   void exit();
#end
};

#end

} //end namespace '${rtcParam.name}FSM'

#endif // ${rtcParam.name.toUpperCase()}_FSM_H
