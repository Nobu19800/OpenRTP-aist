${sharp}----------------------------------------------------------------------
${sharp}
${sharp} RT-Component manager configuration
${sharp}
${sharp} Copyright (c) 2003-2008 Noriaki Ando <n-ando@aist.go.jp>
${sharp}      Task-intelligence Research Group,
${sharp}      Intelligent Systems Research Institute,
${sharp}      National Institute of
${sharp}          Advanced Industrial Science and Technology (AIST), Japan
${sharp}      All rights reserved.
${sharp}
${sharp} ${dol}Id${dol}
${sharp}
${sharp}----------------------------------------------------------------------

${sharp}------------------------------------------------------------
${sharp} Configuration version (optional)
${sharp}
config.version: 1.0

${sharp}------------------------------------------------------------
${sharp} OpenRTM-aist version (optional)
${sharp}
openrtm.version: 1.0.0

${sharp}------------------------------------------------------------
${sharp} The name of manager (default = manager)
${sharp}
manager.name: manager

${sharp}------------------------------------------------------------
${sharp} The instance name of manager (default = manager)
${sharp}
manager.instance_name: manager

${sharp}
${sharp} Manager naming format
${sharp}
${sharp} The name format of manager that is bound to naming services.
${sharp} The delimiter between names is "/".
${sharp} The delimiter between name and kind is ".".
${sharp}
${sharp} This is formatted according to the following replacement rules.
${sharp}
${sharp} %n: The instance name of the manager.
${sharp} %h: The hostname.
${sharp} %M: The manager name.
${sharp} %p: PID of the manager.
${sharp}
naming.formats: %h.host_cxt/%n.mgr


${sharp}------------------------------------------------------------
${sharp} Enable a function to set colors on terminal output
${sharp}
logger.escape_sequence_enable: NO



${sharp}------------------------------------------------------------
${sharp} Master manager
${sharp} - manager.is_master: YES/NO, This process made a master or not.
${sharp} - manager.corba_servant: YES/NO, create manager's corba service or not
${sharp} - corba.master_manager: <host_name>:<port>, master manager's location
manager.is_master: YES
manager.corba_servant: YES
corba.master_manager: localhost:2810

${sharp}------------------------------------------------------------
${sharp} Manager auto shutdown options
${sharp} - manager.shutdown_on_nortcs: YES/NO,
${sharp}   process will be shutdown in case no rtc exists when rtc is deleted.
${sharp} - manager.shutdown_auto:
${sharp}   process will be shutdown in case no rtc exists on periodic check.
${sharp} - manager.auto_shutdown_duration:
${sharp}   manager duration time [s] until shutdown after no RTCs existing
manager.shutdown_on_nortcs: YES
manager.shutdown_auto: YES
manager.auto_shutdown_duration: 10.0

${sharp}------------------------------------------------------------
${sharp} Manager termination wait time
${sharp} - manager.termination_waittime:
${sharp}   wait time length before manager termination thread started
manager.termination_waittime: 0.5

${sharp}------------------------------------------------------------
${sharp} Manager process's CPU affinity setting
${sharp}
${sharp} This option make the process bound to specific CPU(s).  Options must
${sharp} be one or more comma separated numbers to identify CPU ID.  CPU ID
${sharp} is started from 0, and maximum number is number of CPU core -1.  If
${sharp} invalid CPU ID is specified, all the CPU will be used for the
${sharp} process.
${sharp}
${sharp} Example:
${sharp}   manager.cpu_affinity: 0, 1, 2, ...
${sharp}
manager.cpu_affinity: 0


${sharp}------------------------------------------------------------
${sharp} Naming policy
${sharp}
${sharp} "process_unique", "node_unique" and "ns_unique" are supported.
${sharp}
manager.components.naming_policy: process_unique

${sharp}------------------------------------------------------------
${sharp} Supported languages
${sharp}
manager.supported_languages: C++, Python, Java


${sharp}------------------------------------------------------------
${sharp} Enable a module automatic search function
${sharp}
manager.modules.search_auto: YES

${sharp}------------------------------------------------------------
${sharp} Module List to load before CORBA initialization
${sharp}
${sharp} Valid settings:
${sharp} manager.preload.modules: SSLTransport.dll
${sharp} manager.preload.modules: SSLTransport.py
${sharp} manager.preload.modules: SSLTransport
${sharp} manager.preload.modules: C:\\Python27\\Lib\\site-packages\\OpenRTM_aist\\ext\\SSLTransport
${sharp}
manager.preload.modules:



${sharp}============================================================
${sharp} CORBA configuration
${sharp}============================================================
${sharp}
${sharp} CORBA ORB's arguments
${sharp}
${sharp} ORB specific command line options given to ORB_init().
${sharp} See your ORB documentation.
${sharp}
${sharp} Example:
${sharp}   corba.args: -ORBInitialHost myhost -ORBInitialPort 8888
${sharp}
${sharp}
corba.args:

${sharp}
${sharp} ORB endpoint
${sharp}
${sharp} If you have two or more network interfaces, ORB endpoint address and/or
${sharp} port have to be specified. If hostname or port number is abbreviated,
${sharp} default interface or port number is used. At least one colon ':'
${sharp} is needed when you specify this option.
${sharp}
${sharp} Examples:
${sharp}   corba.endpoint: myhost:      (use myhost and default port)
${sharp}   corba.endpoint: :9876        (use default addr and port 9876)
${sharp}   corba.endpoint: myhost:9876  (use myhost and port 9876)
${sharp}
corba.endpoint: [obsolete]

${sharp}
${sharp} Multiple endpoint options (experimental)
${sharp}
${sharp} Multiple endpoint addresses and ports can be specified using this option.
${sharp}
${sharp} Example:
${sharp}   corba.endpoints: 192.168.1.10:1111, 192.168.10.11:2222
${sharp}   corba.endpoints: 192.168.1.10, 192.168.10.11
${sharp}   corba.endpoints: all
${sharp}
corba.endpoints:
corba.endpoints_ipv4: [readonly]
corba.endpoints_ipv6: [readonly]

${sharp}
${sharp} Specify what kind of IP addresses will be set to corba.endpoints
${sharp}
${sharp} Examples:
${sharp} corba.endpoint_property: ipv4
${sharp} corba.endpoint_property: ipv4, ipv6(0)
${sharp} corba.endpoint_property: ipv6
${sharp} corba.endpoint_property: ipv4(0,1), ipv6(2,3)
${sharp}
corba.endpoint_property:

${sharp}
${sharp} CORBA name server setting
${sharp}
${sharp} Multiple name servers can be specified separating by comma.
${sharp} If port number is abbreviated, default port number is used.
${sharp} The default port number is depend on ORB implementation.
${sharp}
${sharp} Examples:
${sharp}   corba.nameservers: openrtm.aist.go.jp:9876
${sharp}   corba.nameservers: rtm0.aist.go.jp, rtm1.aist.go.jp, rtm2.aist.go.jp
${sharp}
corba.nameservers: localhost

${sharp}
${sharp} IOR host address replacement by guessed endpoint from routing (experimental)
${sharp}
${sharp} This option replaces a host address with an endpoint that is guessed
${sharp} by route information to nameserver's address. This option may be
${sharp} effective for CORBA implementation that does not supports IOR's
${sharp} multiple profile or alternate IIOP address. However, since other
${sharp} object references that are obtained from RT-Components or other are
${sharp} not modified by this rule, other RTCs that are connected to this RTC
${sharp} have to also support IOR multiple profile feature.  When this option
${sharp} is used, corba.endpoints option should also be specified with
${sharp} multiple endpoints.
${sharp}
corba.nameservice.replace_endpoint: NO

${sharp}
${sharp} IOR alternate IIOP addresses
${sharp}
${sharp} This option adds alternate IIOP addresses into the IOR Profiles.
${sharp} IOR can include additional endpoints for a servant. It is almost
${sharp} same as "corba.endpoints" option, but this option does not create
${sharp} actual endpoint on the ORB. (corba.endpoints try to create actual
${sharp} endpoint, and if it cannot be created, error will be returned.)
${sharp} This option just add alternate IIOP endpoint address information to
${sharp} an IOR.
${sharp}
${sharp} This option can be used when RTCs are located inside of NAT or
${sharp} router.  Generally speaking, RTCs in a private network cannot
${sharp} connect to RTCs in the global network, because global client cannot
${sharp} reach to private servants. However, if route (or NAT) is properly
${sharp} configured for port forwarding, global RTCs can reach to RTCs in
${sharp} private network.
${sharp}
${sharp} A setting example is as follows.
${sharp} 1) Configure your router properly for port-forwarding.
${sharp}    ex. global 2810 port is forwarded to private 2810
${sharp} 2) Set the following options in rtc.conf
${sharp}  corba.nameservers: my.global.nameserver.com <- name server in global network
${sharp}  corba.endpoints: :2810 <- actual port number
${sharp}  corba.additional_ior_addresses: w.x.y.z:2810 <- routers global IP addr/port
${sharp} 3) Launch global RTCs and private RTC, and connect them.
${sharp}
corba.alternate_iiop_addresses: addr:port

${sharp}
${sharp} Auto update to Master Manager
${sharp}
corba.update_master_manager.enable:YES

${sharp}
${sharp} Update interval [s] for auto update
${sharp}
corba.update_master_manager.interval: 10.0

${sharp}------------------------------------------------------------
${sharp} SSL Transport settings
${sharp}
${sharp} corba.ssl.certificate_authority_file: root.crt
${sharp} corba.ssl.key_file: server.pem
${sharp} corba.ssl.key_file_password: password
${sharp} corba.args:-ORBclientTransportRule "* ssl, tcp"

${sharp}============================================================
${sharp} Naming configurations
${sharp}============================================================
${sharp}
${sharp} Enable/Disable naming functions
${sharp}
naming.enable: YES

${sharp}
${sharp} Naming Types
${sharp}
${sharp} "corba" and "manager" are supported.
${sharp}
naming.type: corba

${sharp}
${sharp} Naming format
${sharp}
${sharp} The name format of components that is bound to naming services.
${sharp} The delimiter between names is "/".
${sharp} The delimiter between name and kind is ".".
${sharp}
${sharp} example: (OpenRTM-aist-0.2.0 style)
${sharp}       %h.host_cxt/%M.mgr_cxt/%c.cat_cxt/%m.mod_cxt/%n.rtc
${sharp} This is formatted according to the following replacement rules.
${sharp}
${sharp} %n: The instance name of the component.
${sharp} %t: The type name of the component.
${sharp} %m: The module name of the component.
${sharp} %v: The version of the component.
${sharp} %V: The component vendor.
${sharp} %c: The category of the component.
${sharp} %h: The hostname.
${sharp} %M: The manager name.
${sharp} %p: PID of the manager.
${sharp}
naming.formats: %h.host/%n.rtc

${sharp}
${sharp} Auto update to Naming Server
${sharp}
naming.update.enable: YES
${sharp}
${sharp} Update interval [s] for auto update
${sharp}
naming.update.interval: 10.0
${sharp}
${sharp} Rebind references in auto update
${sharp}
naming.update.rebind: NO

${sharp} End of Naming configuration section
${sharp}------------------------------------------------------------

${sharp}============================================================
${sharp} Module management
${sharp}============================================================
${sharp}
${sharp} Loadable module search path list
${sharp}
${sharp} Manager searches loadable modules from the specified search path list.
${sharp} Path list elements should be separated by comma.
${sharp} Path delimiter is '/' on UNIX, and '\\' on Windows
${sharp} Valid path examples:
${sharp}   manager.modules.load_path: C:/Program Files/OpenRTM-aist,  \
${sharp}   			       C:\\Program Files\\OpenRTM-aist
${sharp}   manager.modules.load_path: /usr/lib, /usr/local/lib,       \
${sharp}   			       /usr/local/lib/OpenRTM-aist/libs
${sharp}
manager.modules.load_path: ./

${sharp}
${sharp} Preload module list
${sharp}
${sharp} Manager can load loadable modules before starting up.
${sharp} Loadable modules, which is specified only as its file name, is searched
${sharp} in each module load path specified in the "manager.modules.load_path".
${sharp} If the "manager.modules.abs_path_allowed" option is YES, loadable file
${sharp} can be specified as full-path name.
${sharp}
${sharp} Module initialization function name is usually estimated module file
${sharp} name.  If the module file name is ConsoleIn.so, the initialization
${sharp} function name is set to "ConsleInInit." If you want to specify
${sharp} specify the initialization function name, the initialization
${sharp} function name in parenthesis after module file name can be
${sharp} specified, like as "Hoge.so (ConsoleInInit)".  File extensions such
${sharp} as ".so", ".dll", ".dylib" can be drop. If module file name without
${sharp} file extension is specified, an extension specified in property
${sharp} variable "manager.modules.C++.suffixes" is supplied.
${sharp}
${sharp} Valid settings:
${sharp} manager.modules.preload: ConsoleIn.dll, ConsoleOut.dll
${sharp} manager.modules.preload: ConsoleIn.so, ConsoleOut.so
${sharp} manager.modules.preload: Hoge.so (ConsoleInInit), ConsoleOut
${sharp} manager.modules.abs_path_allowed: YES
${sharp} manager.modules.preload: /usr/lib/OpenRTM-aist/ConsoleIn.so
${sharp}
manager.modules.preload:

${sharp}
${sharp} Permission flag of absolute module path
${sharp}
${sharp} If this option is "YES", absolute path specification for module is allowed.
${sharp}
manager.modules.abs_path_allowed: YES

${sharp}
${sharp} The following options are not implemented yet.
${sharp}
${sharp} manager.modules.config_ext:
${sharp} manager.modules.config_path:
${sharp} manager.modules.detect_loadable:
${sharp} manager.modules.init_func_suffix:
${sharp} manager.modules.init_func_prefix:
${sharp} manager.modules.download_allowed:
${sharp} manager.modules.download_dir:
${sharp} manager.modules.download_cleanup:
${sharp}

${sharp}
${sharp} Advance component creation
${sharp}
${sharp} This option specifies components' names (module name) creating in advance
${sharp} before starting the manager's event-loop. The components' factories should
${sharp} be registered by manager.module.preload option or statically linked to the
${sharp}  manager.
${sharp}
${sharp} Example:
${sharp} manager.components.precreate: ConsoleIn, ConsoleOut, SeqIn, SeqOut
${sharp}
manager.components.precreate:

${sharp}
${sharp} Advance connection creation
${sharp}
${sharp} This option specifies connections to be created in advance before
${sharp} starting the manager's event-loop. The target components and ports
${sharp} must be created previously by manager.components.precreate optinos.
${sharp} A port is specified as XXX format, and a connection is specified by
${sharp} a delimiter XX between ports such as ConsoleIn.out:ConsoleOut.in. A
${sharp} connector profile is specified in the following parentheses "()" by
${sharp} "key=falue" format with "&" delimiter.
${sharp}
${sharp} Example:
${sharp} manager.components.preconnect: ConsoleIn.out:ConsoleOut.in(dataflow_type=push&interface_type=corba_cdr), SeqIn.octet:SeqOut.octet(dataflow_type=push&&interface_type=direct)
${sharp} if no parenthis parts are included, dataflow_type=push, interface_type=corba_cdr
${sharp}
manager.components.preconnect:

${sharp}
${sharp} Advance component activation
${sharp}
${sharp} This option specifies components' names (module name) to be
${sharp} activated in advance before starting the manager's event-loop. The
${sharp} target components should be created previously by
${sharp} manager.components.precreate optinos.
${sharp}
${sharp} Example:
${sharp} manager.components.preactivate: ConsoleIn0, ConsoleOut0
${sharp}
manager.components.preactivate:

${sharp}
${sharp} Loading local service modules
${sharp}
${sharp} Local service mechanisms are provided for services provided among
${sharp} components in the same process. Components can obtain and utilize
${sharp} local services from the manager. By using this mechanism components
${sharp} can share resources each other.
${sharp}
${sharp} Local service modules sometimes must be initialized before component
${sharp} module loading and initialization. Loadable modules which is
${sharp} specified in this option are previously loaded and initialized.
${sharp}
manager.local_service.modules: IEEE1394CameraService.so

${sharp}
${sharp} Specifying enabled local services
${sharp}
${sharp} All the loaded local service modules are activated and enabled in
${sharp} default.  This option specify local serivces to be enabled when
${sharp} manager enables local services.
${sharp}
manager.local_service.enabled_services: IEEE1394CameraService


${sharp}============================================================
${sharp} Logger configurations
${sharp}============================================================
${sharp}
${sharp} Enable/Disable logger [YES/NO]
logger.enable: YES

${sharp}
${sharp} Log file name (default = ./rtc%p.log)
${sharp}
${sharp} %p: PID
${sharp}
logger.file_name: ./rtc%p.log

${sharp}
${sharp} Log date format (default = %b %d %H:%M:%S)
${sharp}
${sharp} The following strftime(3) like format expression is available.
${sharp} If no prefix is needed, use "No" or "Disable".
${sharp}
${sharp} %a abbreviated weekday name
${sharp} %A full weekday name
${sharp} %b abbreviated month name
${sharp} %B full month name
${sharp} %c the standard date and time string
${sharp} %d day of the month, as a number (1-31)
${sharp} %H hour, 24 hour format (0-23)
${sharp} %I hour, 12 hour format (1-12)
${sharp} %j day of the year, as a number (1-366)
${sharp} %m month as a number (1-12).
${sharp}    Note: some versions of Microsoft Visual C++ may use values that range
${sharp}    from 0-11.
${sharp} %M minute as a number (0-59)
${sharp} %p locale's equivalent of AM or PM
${sharp} %Q millisecond as a number (0-999) from ver 1.1
${sharp} %q microsecond as a number (0-999) from ver 1.1
${sharp} %S second as a number (0-59)
${sharp} %U week of the year, sunday as the first day
${sharp} %w weekday as a decimal (0-6, sunday=0)
${sharp} %W week of the year, monday as the first day
${sharp} %x standard date string
${sharp} %X standard time string
${sharp} %y year in decimal, without the century (0-99)
${sharp} %Y year in decimal, with the century
${sharp} %Z time zone name
${sharp} %% a percent sign
${sharp}
${sharp}
${sharp} logger.date_format: No
${sharp} logger.date_format: Disable
${sharp} logger.date_format: [%Y-%m-%dT%H.%M.%S%Z]     // W3C standard format
${sharp} logger.date_format: [%b %d %H:%M:%S]          // Syslog format
${sharp} logger.date_format: [%a %b %d %Y %H:%M:%S %Z] // RFC2822 format
${sharp} logger.date_format: [%a %b %d %H:%M:%S %Z %Y] // data command format
${sharp} logger.date_format: [%Y-%m-%d %H.%M.%S]
${sharp}
logger.date_format: %b %d %H:%M:%S

${sharp}${sharp}
${sharp}${sharp} Log level (default = INFO)
${sharp}${sharp}
${sharp}${sharp} The following LogLevels are allowed.
${sharp}${sharp} SILENT, FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARANOID
${sharp}${sharp}
${sharp}${sharp}
${sharp}${sharp} SILENT  : completely silent
${sharp}${sharp} FATAL   : includes (FATAL)
${sharp}${sharp} ERROR   : includes (FATAL, ERROR)
${sharp}${sharp} WARN    : includes (FATAL, ERROR, WARN)
${sharp}${sharp} INFO    : includes (FATAL, ERROR, WARN, INFO)
${sharp}${sharp} DEBUG   : includes (FATAL, ERROR, WARN, INFO, DEBUG)
${sharp}${sharp} TRACE   : includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE)
${sharp}${sharp} VERBOSE : includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE)
${sharp}${sharp} PARANOID: includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARA)
${sharp}${sharp}
${sharp}${sharp} Warning!!!
${sharp}${sharp} "TRACE", "VERBOSE", "PARANOID" logging level will create a huge log file!!
${sharp}${sharp} "PARANOID" log level will tangle the log file.
${sharp}${sharp}
logger.log_level: INFO

${sharp}
${sharp} Logger's clock time
${sharp}
${sharp} logger.clock_type option specifies a type of clock to be used for
${sharp} timestamp of log message. Now these three types are available.
${sharp}
${sharp} - system: system clock [default]
${sharp} - logical: logical clock
${sharp} - adjusted: adjusted clock
${sharp}
${sharp} To use logical time clock, call and set time by the following
${sharp} function in somewhere.
${sharp} coil::ClockManager::instance().getClock("logical").settime()
${sharp}
logger.clock_type: system

${sharp}============================================================
${sharp} Timer configuration
${sharp}============================================================
${sharp}
${sharp} Enable/disable timer function
${sharp}
timer.enable: YES

${sharp}
${sharp} Timer clock tick setting [s]
${sharp}
timer.tick: 0.1

${sharp}============================================================
${sharp} Execution context settings
${sharp}============================================================
${sharp}
${sharp} Periodic type ExecutionContext
${sharp}
${sharp} Other availabilities in OpenRTM-aist
${sharp}
${sharp} - ExtTrigExecutionContext:   External triggered EC. It is embedded in
${sharp}                              OpenRTM library.
${sharp} - OpenHRPExecutionContext:   External triggred paralell execution
${sharp}                              EC. It is embedded in OpenRTM
${sharp}                              library. This is usually used with
${sharp}                              OpenHRP3.
${sharp} - SimulatorExecutionContext: External triggred paralell execution
${sharp}                              EC. It is embedded in OpenRTM
${sharp}                              library. This is usually used with
${sharp}                              Choreonoid.
${sharp} - RTPreemptEC:               Real-time execution context for Linux
${sharp}                              RT-preemptive pathed kernel.
${sharp} - ArtExecutionContext:       Real-time execution context for ARTLinux
${sharp}                              (http://sourceforge.net/projects/art-linux/)
${sharp}
exec_cxt.periodic.type: PeriodicExecutionContext
${sharp} exec_cxt.event_driven_type: to be implemented

${sharp}
${sharp} The execution cycle of ExecutionContext
${sharp}
exec_cxt.periodic.rate: 1000

${sharp}
${sharp} State transition mode settings YES/NO
${sharp}
${sharp} Default: YES (efault setting is recommended.)
${sharp}
${sharp} Activating, deactivating and resetting of RTC makes state
${sharp} transition.  Some execution contexts execute main logic in different
${sharp} thread.  If these flags set to YES, activation, deactivation and
${sharp} resetting will be performed synchronously.  In other words, if these
${sharp} flags are YES, activation/deactivation/resetting-operations must be
${sharp} returned after state transition completed.
${sharp}
${sharp} "synchronous_transition" will set synchronous transition flags to
${sharp} all other synchronous transition flags
${sharp} (synchronous_activation/deactivation/resetting.
${sharp}
exec_cxt.sync_transition: YES
exec_cxt.sync_activation: YES
exec_cxt.sync_deactivation: YES
exec_cxt.sync_reset: YES

${sharp}
${sharp} Timeout of synchronous state transition [s]
${sharp}
${sharp} Default: 1.0 [s]
${sharp}
${sharp} When synchronous transition flags are set to YES, the following
${sharp} timeout settings are valid. If "transition_timeout" is set, the
${sharp} value will be set to all other timeout of activation/deactivation
${sharp} and resetting
${sharp}
exec_cxt.transition_timeout: 0.5
exec_cxt.activation_timeout: 0.5
exec_cxt.deactivation_timeout: 0.5
exec_cxt.reset_timeout: 0.5



${sharp}============================================================
${sharp} SDO service settings
${sharp}============================================================
${sharp}
${sharp} SDO service provider settings
${sharp}
sdo.service.provider.available_services: [read only]
sdo.service.provider.enabled_services: ALL
sdo.service.provider.providing_services: [read only]
${sharp}
${sharp} SDO service consumer settings
${sharp}
sdo.service.consumer.available_services: [read only]
sdo.service.consumer.enabled_services: ALL


${sharp}============================================================
${sharp} Fluent-bit logger plugin setting
${sharp}============================================================
${sharp}
${sharp} This is fluentbit logger plugin example in rtc.conf
${sharp}
logger.enable: YES
logger.log_level: PARANOID
logger.file_name: rtc%p.log, stderr

${sharp} fluentbit specific configurations
logger.plugins: FluentBit.so

${sharp} Output example (forward)
logger.logstream.fluentd.output0.plugin: forward
logger.logstream.fluentd.output0.tag: fluent_forward
logger.logstream.fluentd.output0.match: *
${sharp}logger.logstream.fluentd.output0.host: 127.0.0.1 (default)
${sharp}logger.logstream.fluentd.output0.port: 24224 (default)

${sharp} Output example (stdout)
logger.logstream.fluentd.output1.plugin: stdout
logger.logstream.fluentd.output1.tag: fluent_stdout
logger.logstream.fluentd.output1.match: *

${sharp} Input example (CPU)
logger.logstream.fluentd.input0.plugin: cpu
logger.logstream.fluentd.input0.tag: fluent_cpu


${sharp}============================================================
${sharp} DataPort setting
${sharp}============================================================

${sharp}------------------------------------------------------------
${sharp}
${sharp} Number of connectors that can be generated on the target data port
${sharp} port.inport.<InPortName>.fan_in: 100
${sharp} port.outport.<OutPortName>.fan_out: 100


${sharp}------------------------------------------------------------
${sharp}
${sharp} Enable a function of double connection prevention
${sharp} port.inport.<InPortName>.allow_dup_connection: YES
${sharp} port.outport.<OutPortName>.allow_dup_connection: YES
