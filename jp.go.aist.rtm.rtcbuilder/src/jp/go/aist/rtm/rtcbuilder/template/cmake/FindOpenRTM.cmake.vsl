
set(OMNIORB_FOUND FALSE)
set(OPENRTM_FOUND FALSE)


if(UNIX)
    include(FindPkgConfig)

    ${sharp} omniORB
    pkg_check_modules(OMNIORB REQUIRED "omniORB4")
    if(NOT OMNIORB_DIR)
        if(OMNIORB_FOUND)
            set(OMNIORB_DIR "${dol}{OMNIORB_PREFIX}")
        endif()
        set(OMNIORB_DIR "${dol}{OMNIORB_DIR}" CACHE PATH "omniORB root directory")
    endif()

    set(OMNIORB_CFLAGS ${dol}{OMNIORB_CFLAGS_OTHER})
    set(OMNIORB_LDFLAGS ${dol}{OMNIORB_LDFLAGS_OTHER})

    ${sharp} OpenRTM-aist
    pkg_check_modules(OPENRTM REQUIRED "openrtm-aist")
    if(NOT OPENRTM_DIR)
        if(OPENRTM_FOUND)
            set(OPENRTM_DIR "${dol}{OPENRTM_PREFIX}")
        endif()
        set(OPENRTM_DIR "${dol}{OPENRTM_DIR}" CACHE PATH "OpenRTM-aist root directory")
    endif()

    set(OPENRTM_CFLAGS ${dol}{OPENRTM_CFLAGS_OTHER})
    set(OPENRTM_LDFLAGS ${dol}{OPENRTM_LDFLAGS_OTHER})

    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+)" "\\1"
           OPENRTM_VERSION_MAJOR "${dol}{OPENRTM_VERSION}")
    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+)" "\\2"
           OPENRTM_VERSION_MINOR "${dol}{OPENRTM_VERSION}")
    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+)" "\\3"
           OPENRTM_VERSION_PATCH "${dol}{OPENRTM_VERSION}")

    ${sharp} IDL Compiler
    set(OPENRTM_IDLC "")
    set(OPENRTM_IDLFLAGS "")

    execute_process(COMMAND rtm-config --idlc
                    RESULT_VARIABLE result_val
                    OUTPUT_VARIABLE output_val
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    if(result_val EQUAL 0)
        set(OPENRTM_IDLC "${dol}{output_val}")
    endif()

    execute_process(COMMAND rtm-config --idlflags
                    RESULT_VARIABLE result_val
                    OUTPUT_VARIABLE output_val
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    if(result_val EQUAL 0)
        string(REPLACE " " ";" output_val ${dol}{output_val})
        set(OPENRTM_IDLFLAGS ${dol}{output_val} "-I${dol}{OPENRTM_DIR}/include/rtm/idl")
    endif()

    ${sharp} IDL Skelton Wrapper
    set(OPENRTM_IDL_WRAPPER "rtm-skelwrapper")
    set(OPENRTM_IDL_WRAPPER_FLAGS --include-dir="" --skel-suffix=Skel --stub-suffix=Stub)

endif(UNIX)

set(WIN32_RTM "")
set(RTM_CONFIG_CMAKE "")

macro(rtm_norm_path _path _result)
    string(REGEX REPLACE "\"" ""    _var "${dol}{_path}")
    string(REGEX REPLACE "[/]+" "/" _var "${dol}{_var}")
    string(REGEX REPLACE "[/]${dol}" ""  _var "${dol}{_var}")
    set(${dol}{_result} "${dol}{_var}")
endmacro(rtm_norm_path)

if(WIN32)
    set(WIN32_RTM "10")
    find_file(rtm_conf "rtm_config.cmake" PATHS "${dol}ENV{RTM_ROOT}/etc")
    if(rtm_conf)
        set(WIN32_RTM "11")
        set(RTM_CONFIG_CMAKE "${dol}{rtm_conf}")
    endif()
endif(WIN32)

if(WIN32_RTM STREQUAL "11")
    include("${dol}{RTM_CONFIG_CMAKE}")
    message(STATUS "Configuration by ${dol}{RTM_CONFIG_CMAKE}.")

    ${sharp} omniORB
    set(OMNIORB_DIR "${dol}{omni_root}")
    set(OMNIORB_FOUND TRUE)
    file(TO_CMAKE_PATH "${dol}{OMNIORB_DIR}" OMNIORB_DIR)

    foreach(path ${dol}{omni_includes})
        file(TO_CMAKE_PATH "${dol}{path}" path)
        rtm_norm_path("${dol}{path}" path)
        list(APPEND OMNIORB_INCLUDE_DIRS "${dol}{path}")
    endforeach()
    foreach(path ${dol}{omni_libdir})
        file(TO_CMAKE_PATH "${dol}{path}" path)
        rtm_norm_path("${dol}{path}" path)
        list(APPEND OMNIORB_LIBRARY_DIRS "${dol}{path}")
    endforeach()

    ${sharp} omniORB version
    file(GLOB _vers RELATIVE "${dol}{OMNIORB_DIR}" "${dol}{OMNIORB_DIR}/THIS_IS_OMNIORB*")
    if("${dol}{_vers}" STREQUAL "")
        message(FATAL_ERROR "omniORB version file not found.")
    endif()

    set(OMNIORB_VERSION "${dol}{_vers}")
    string(REGEX REPLACE "THIS_IS_OMNIORB_" ""
           OMNIORB_VERSION "${dol}{OMNIORB_VERSION}")
    string(REGEX REPLACE "[_]" "."
           OMNIORB_VERSION "${dol}{OMNIORB_VERSION}")

    set(OMNIORB_VERSION_NUM "${dol}{omni_dllver}")
    set(OMNIORB_THREAD_NUM "${dol}{omnithread_dllver}")

    set(OMNIORB_CFLAGS -D__WIN32__;-D__x86__;-D__NT__;-D__OSVERSION__=4;-D_CRT_SECURE_NO_DEPRECATE)
    if(${dol}{OMNIORB_VERSION_NUM} MATCHES "^40")
      set(OMNIORB_CFLAGS ${dol}{OMNIORB_CFLAGS};-D_WIN32_WINNT=0x0400)
    else()
      set(OMNIORB_CFLAGS ${dol}{OMNIORB_CFLAGS};-D_WIN32_WINNT=0x0500;-DRTC_CORBA_CXXMAPPING11)
    endif()

    foreach(library ${dol}{omni_lib})
        list(APPEND OMNIORB_LIBRARIES optimized "${dol}{library}")
    endforeach()
    foreach(library ${dol}{omni_libd})
        list(APPEND OMNIORB_LIBRARIES debug "${dol}{library}")
    endforeach()

    ${sharp} OpenRTM-aist
    set(OPENRTM_DIR "${dol}{rtm_root}")
    set(OPENRTM_FOUND TRUE)
    file(TO_CMAKE_PATH "${dol}{OPENRTM_DIR}" OPENRTM_DIR)

    ${sharp} OpenRTM-aist version
    set(OPENRTM_VERSION "${dol}{rtm_version}")
    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+)" "\\1"
           OPENRTM_VERSION_MAJOR "${dol}{OPENRTM_VERSION}")
    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+)" "\\2"
           OPENRTM_VERSION_MINOR "${dol}{OPENRTM_VERSION}")
    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)\\.([0-9]+)" "\\3"
           OPENRTM_VERSION_PATCH "${dol}{OPENRTM_VERSION}")

    set(OPENRTM_VERSION_NUM "${dol}{rtm_dllver}")

    foreach(path ${dol}{rtm_includes})
        file(TO_CMAKE_PATH "${dol}{path}" path)
        rtm_norm_path("${dol}{path}" path)
        list(APPEND OPENRTM_INCLUDE_DIRS "${dol}{path}")
    endforeach()
    foreach(path ${dol}{rtm_libdir})
        file(TO_CMAKE_PATH "${dol}{path}" path)
        rtm_norm_path("${dol}{path}" path)
        list(APPEND OPENRTM_LIBRARY_DIRS "${dol}{path}")
    endforeach()

    set(OPENRTM_CFLAGS "-DUSE_stub_in_nt_dll")

    foreach(library ${dol}{rtm_lib})
        list(APPEND OPENRTM_LIBRARIES optimized "${dol}{library}")
    endforeach()
    foreach(library ${dol}{coil_lib})
        list(APPEND OPENRTM_LIBRARIES optimized "${dol}{library}")
    endforeach()

    foreach(library ${dol}{rtm_libd})
        list(APPEND OPENRTM_LIBRARIES debug "${dol}{library}")
    endforeach()
    foreach(library ${dol}{coil_libd})
        list(APPEND OPENRTM_LIBRARIES debug "${dol}{library}")
    endforeach()

    ${sharp} IDL Compiler
    set(OPENRTM_IDLC "${dol}{rtm_idlc}")
    foreach(flag ${dol}{rtm_idlflags})
        string(REGEX REPLACE "[\\]" "/" flag "${flag}")
        list(APPEND OPENRTM_IDLFLAGS "${dol}{flag}")
    endforeach()

    ${sharp} IDL Skelton Wrapper
    set(OPENRTM_IDL_WRAPPER "rtm-skelwrapper.py")
    set(OPENRTM_IDL_WRAPPER_FLAGS --include-dir="" --skel-suffix=Skel --stub-suffix=Stub)

endif(WIN32_RTM STREQUAL "11")

if(WIN32_RTM STREQUAL "10")
    ${sharp} omniORB
    if(NOT OMNIORB_DIR)
        if(NOT ${dol}ENV{OMNI_ROOT} STREQUAL "")
            set(OMNIORB_DIR "${dol}ENV{OMNI_ROOT}")
            set(OMNIORB_FOUND TRUE)
        endif()
        set(OMNIORB_DIR "${dol}{OMNIORB_DIR}" CACHE PATH "omniORB root directory")
        if(NOT OMNIORB_FOUND)
            message(FATAL_ERROR "omniORB not found.")
        endif()
    endif()

    set(OMNIORB_INCLUDE_DIRS "${dol}{OMNIORB_DIR}/include")
    set(OMNIORB_LIBRARY_DIRS "${dol}{OMNIORB_DIR}/lib/x86_win32")

    ${sharp} omniORB version
    file(GLOB _vers RELATIVE "${dol}{OMNIORB_DIR}" "${dol}{OMNIORB_DIR}/THIS_IS_OMNIORB*")
    if("${dol}{_vers}" STREQUAL "")
        message(FATAL_ERROR "omniORB version file not found.")
    endif()

    set(OMNIORB_VERSION "${dol}{_vers}")
    string(REGEX REPLACE "THIS_IS_OMNIORB_" ""
           OMNIORB_VERSION "${dol}{OMNIORB_VERSION}")
    string(REGEX REPLACE "[_]" "."
           OMNIORB_VERSION "${dol}{OMNIORB_VERSION}")
    string(REGEX REPLACE "[.]" ""
           OMNIORB_VERSION_NUM "${dol}{OMNIORB_VERSION}")

    ${sharp} omnithread version
    file(GLOB _vers RELATIVE "${dol}{OMNIORB_LIBRARY_DIRS}" "${dol}{OMNIORB_LIBRARY_DIRS}/omnithread*")
    if("${dol}{_vers}" STREQUAL "")
        message(FATAL_ERROR "omnithread not found.")
    endif()
    string(REGEX REPLACE ".*omnithread([0-9]+)_rt\\.lib.*" "\\1"
           OMNIORB_THREAD_NUM "${dol}{_vers}")

    set(OMNIORB_CFLAGS -D__WIN32__;-D__x86__;-D__NT__;-D__OSVERSION__=4;-D_CRT_SECURE_NO_DEPRECATE)
    if(${dol}{OMNIORB_VERSION_NUM} MATCHES "^40")
      set(OMNIORB_CFLAGS ${dol}{OMNIORB_CFLAGS};-D_WIN32_WINNT=0x0400)
    else()
      set(OMNIORB_CFLAGS ${dol}{OMNIORB_CFLAGS};-D_WIN32_WINNT=0x0500;-DRTC_CORBA_CXXMAPPING11)
    endif()

    foreach(library "omniORB${dol}{OMNIORB_VERSION_NUM}_rt"
                    "omniDynamic${dol}{OMNIORB_VERSION_NUM}_rt"
                    "omnithread${dol}{OMNIORB_THREAD_NUM}_rt")
        list(APPEND OMNIORB_LIBRARIES optimized "${dol}{library}" debug "${dol}{library}d")
    endforeach()

    ${sharp} OpenRTM-aist
    if(NOT OPENRTM_DIR)
        if(NOT ${dol}ENV{RTM_ROOT} STREQUAL "")
            set(OPENRTM_DIR "${dol}ENV{RTM_ROOT}")
            set(OPENRTM_FOUND TRUE)
        endif()
        set(OPENRTM_DIR "${dol}{OPENRTM_DIR}" CACHE PATH "OpenRTM-aist root directory")
        if(NOT OPENRTM_FOUND)
            message(FATAL_ERROR "OpenRTM-aist not found.")
        endif()
    endif()

    ${sharp} OpenRTM-aist version
    set(OPENRTM_VERSION "${dol}{OPENRTM_DIR}")
    string(REGEX REPLACE ".*OpenRTM-aist/" "" OPENRTM_VERSION "${dol}{OPENRTM_VERSION}")
    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)" "\\1" OPENRTM_VERSION_MAJOR "${dol}{OPENRTM_VERSION}")
    string(REGEX REPLACE "([0-9]+)\\.([0-9]+)" "\\2" OPENRTM_VERSION_MINOR "${dol}{OPENRTM_VERSION}")
    set(OPENRTM_VERSION_PATCH "0")
    set(OPENRTM_VERSION "${dol}{OPENRTM_VERSION_MAJOR}.${dol}{OPENRTM_VERSION_MINOR}.${dol}{OPENRTM_VERSION_PATCH}")
    string(REGEX REPLACE "[.]" ""
           OPENRTM_VERSION_NUM "${dol}{OPENRTM_VERSION}")

    set(OPENRTM_INCLUDE_DIRS "${dol}{OPENRTM_DIR}")
    set(OPENRTM_LIBRARY_DIRS "${dol}{OPENRTM_DIR}/bin")
    list(APPEND OPENRTM_INCLUDE_DIRS "${dol}{OPENRTM_DIR}/rtm/idl")

    set(OPENRTM_CFLAGS "-DUSE_stub_in_nt_dll")

    foreach(library "RTC${dol}{OPENRTM_VERSION_NUM}" "coil")
        list(APPEND OPENRTM_LIBRARIES optimized "${dol}{library}" debug "${dol}{library}d")
    endforeach()
    foreach(library "ws2_32" "mswsock")
        list(APPEND OPENRTM_LIBRARIES optimized "${dol}{library}" debug "${dol}{library}")
    endforeach()

    ${sharp} IDL Compiler
    set(OPENRTM_IDLC "omniidl")
    set(OPENRTM_IDLFLAGS -bcxx -Wba -nf)

    ${sharp} IDL Skelton Wrapper
    set(OPENRTM_IDL_WRAPPER "rtm-skelwrapper.py")
    set(OPENRTM_IDL_WRAPPER_FLAGS --include-dir="" --skel-suffix=Skel --stub-suffix=Stub)

endif(WIN32_RTM STREQUAL "10")

message(STATUS "FindOpenRTM setup done.")

message(STATUS "  OMNIORB_DIR=${dol}{OMNIORB_DIR}")
message(STATUS "  OMNIORB_VERSION=${dol}{OMNIORB_VERSION}")
message(STATUS "  OMNIORB_CFLAGS=${dol}{OMNIORB_CFLAGS}")
message(STATUS "  OMNIORB_INCLUDE_DIRS=${dol}{OMNIORB_INCLUDE_DIRS}")
message(STATUS "  OMNIORB_LDFLAGS=${dol}{OMNIORB_LDFLAGS}")
message(STATUS "  OMNIORB_LIBRARY_DIRS=${dol}{OMNIORB_LIBRARY_DIRS}")
message(STATUS "  OMNIORB_LIBRARIES=${dol}{OMNIORB_LIBRARIES}")

message(STATUS "  OPENRTM_DIR=${dol}{OPENRTM_DIR}")
message(STATUS "  OPENRTM_VERSION=${dol}{OPENRTM_VERSION}")
message(STATUS "  OPENRTM_VERSION_MAJOR=${dol}{OPENRTM_VERSION_MAJOR}")
message(STATUS "  OPENRTM_VERSION_MINOR=${dol}{OPENRTM_VERSION_MINOR}")
message(STATUS "  OPENRTM_VERSION_PATCH=${dol}{OPENRTM_VERSION_PATCH}")
message(STATUS "  OPENRTM_CFLAGS=${dol}{OPENRTM_CFLAGS}")
message(STATUS "  OPENRTM_INCLUDE_DIRS=${dol}{OPENRTM_INCLUDE_DIRS}")
message(STATUS "  OPENRTM_LDFLAGS=${dol}{OPENRTM_LDFLAGS}")
message(STATUS "  OPENRTM_LIBRARY_DIRS=${dol}{OPENRTM_LIBRARY_DIRS}")
message(STATUS "  OPENRTM_LIBRARIES=${dol}{OPENRTM_LIBRARIES}")

message(STATUS "  OPENRTM_IDLC=${dol}{OPENRTM_IDLC}")
message(STATUS "  OPENRTM_IDLFLAGS=${dol}{OPENRTM_IDLFLAGS}")
message(STATUS "  OPENRTM_IDL_WRAPPER=${dol}{OPENRTM_IDL_WRAPPER}")
message(STATUS "  OPENRTM_IDL_WRAPPER_FLAGS=${dol}{OPENRTM_IDL_WRAPPER_FLAGS}")
