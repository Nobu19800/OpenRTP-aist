${sharp} Dissect the version specified in PROJECT_VERSION, placing the major,
${sharp} minor, revision and candidate components in PROJECT_VERSION_MAJOR, etc.
${sharp} _prefix: The prefix string for the version variable names.
macro(DISSECT_VERSION)
    ${sharp} Find version components
    string(REGEX REPLACE "^([0-9]+).*" "\\1"
        PROJECT_VERSION_MAJOR "${dol}{PROJECT_VERSION}")
    string(REGEX REPLACE "^[0-9]+\\.([0-9]+).*" "\\1"
        PROJECT_VERSION_MINOR "${dol}{PROJECT_VERSION}")
    string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.([0-9]+)" "\\1"
        PROJECT_VERSION_REVISION "${dol}{PROJECT_VERSION}")
    string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.[0-9]+(.*)" "\\1"
        PROJECT_VERSION_CANDIDATE "${dol}{PROJECT_VERSION}")
endmacro(DISSECT_VERSION)

${sharp} Filter a list to remove all strings matching the regex in _pattern. The
${sharp} output is placed in the variable pointed at by _output.
macro(FILTER_LIST _list _pattern _output)
    set(${dol}{_output})
    foreach(_item ${dol}{_list})
        if("${dol}{_item}" MATCHES ${dol}{_pattern})
            set(${dol}{_output} ${dol}{${dol}{_output}} ${dol}{_item})
        endif("${dol}{_item}" MATCHES ${dol}{_pattern})
    endforeach(_item)
endmacro(FILTER_LIST)

