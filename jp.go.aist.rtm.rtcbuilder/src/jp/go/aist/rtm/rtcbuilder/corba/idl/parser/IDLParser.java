package jp.go.aist.rtm.rtcbuilder.corba.idl.parser;
/* Generated By:JavaCC: Do not edit this line. IDLParser.java */
import jp.go.aist.rtm.rtcbuilder.corba.idl.parser.syntaxtree.*;
import java.util.Vector;


public class IDLParser implements IDLParserConstants {
   public static void main(String args[])
   {
      IDLParser parser;
      if ( args.length == 0 )
      {
         System.out.println("IDL Parser Version 0.1:  Reading from standard input . . .");
         parser = new IDLParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("IDL Parser Version 0.1:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new IDLParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("IDL Parser Version 0.1:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("IDL Parser Version 0.1:  Usage is one of:");
            System.out.println("         java IDLParser < inputfile");
            System.out.println("OR");
            System.out.println("         java IDLParser inputfile");
            return;
         }
      try
      {
         parser.specification();
         System.out.println("IDL Parser Version 0.1:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println("IDL Parser Version 0.1:  Encountered errors during parse.");
      }
   }

  final public specification specification() throws ParseException {
   NodeList n0 = new NodeList();
   definition n1;
    label_1:
    while (true) {
      n1 = definition();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case 15:
      case 19:
      case 36:
      case 46:
      case 47:
      case 51:
      case 61:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new specification(n0);}
    throw new Error("Missing return statement in function");
  }

  final public definition definition() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   type_dcl n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   const_dcl n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   except_dcl n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   interfacex n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   module n18;
   NodeToken n19;
   Token n20;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
    case 46:
    case 47:
    case 51:
        n1 = new NodeSequence(2);
      n2 = type_dcl();
        n1.addNode(n2);
      n4 = jj_consume_token(11);
               n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case 19:
        n5 = new NodeSequence(2);
      n6 = const_dcl();
        n5.addNode(n6);
      n8 = jj_consume_token(11);
               n7 = JTBToolkit.makeNodeToken(n8);
        n5.addNode(n7);
        n0 = new NodeChoice(n5, 1);
      break;
    case 61:
        n9 = new NodeSequence(2);
      n10 = except_dcl();
        n9.addNode(n10);
      n12 = jj_consume_token(11);
                n11 = JTBToolkit.makeNodeToken(n12);
        n9.addNode(n11);
        n0 = new NodeChoice(n9, 2);
      break;
    case 15:
        n13 = new NodeSequence(2);
      n14 = interfacex();
        n13.addNode(n14);
      n16 = jj_consume_token(11);
                n15 = JTBToolkit.makeNodeToken(n16);
        n13.addNode(n15);
        n0 = new NodeChoice(n13, 3);
      break;
    case 12:
        n17 = new NodeSequence(2);
      n18 = module();
        n17.addNode(n18);
      n20 = jj_consume_token(11);
                n19 = JTBToolkit.makeNodeToken(n20);
        n17.addNode(n19);
        n0 = new NodeChoice(n17, 4);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new definition(n0);}
    throw new Error("Missing return statement in function");
  }

  final public module module() throws ParseException {
   NodeToken n0;
   Token n1;
   identifier n2;
   NodeToken n3;
   Token n4;
   NodeList n5 = new NodeList();
   definition n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(12);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = identifier();
    n4 = jj_consume_token(13);
            n3 = JTBToolkit.makeNodeToken(n4);
    label_2:
    while (true) {
      n6 = definition();
        n5.addNode(n6);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 12:
      case 15:
      case 19:
      case 36:
      case 46:
      case 47:
      case 51:
      case 61:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
     n5.nodes.trimToSize();
    n8 = jj_consume_token(14);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new module(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public interfacex interfacex() throws ParseException {
   NodeChoice n0;
   interface_dcl n1;
   forward_dcl n2;
    if (jj_2_1(3)) {
      n1 = interface_dcl();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        n2 = forward_dcl();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new interfacex(n0);}
    throw new Error("Missing return statement in function");
  }

  final public interface_dcl interface_dcl() throws ParseException {
   interface_header n0;
   NodeToken n1;
   Token n2;
   interface_body n3;
   NodeToken n4;
   Token n5;
    n0 = interface_header();
    n2 = jj_consume_token(13);
            n1 = JTBToolkit.makeNodeToken(n2);
    n3 = interface_body();
    n5 = jj_consume_token(14);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new interface_dcl(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  final public forward_dcl forward_dcl() throws ParseException {
   NodeToken n0;
   Token n1;
   identifier n2;
    n1 = jj_consume_token(15);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = identifier();
     {if (true) return new forward_dcl(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public interface_header interface_header() throws ParseException {
   NodeToken n0;
   Token n1;
   identifier n2;
   NodeOptional n3 = new NodeOptional();
   inheritance_spec n4;
    n1 = jj_consume_token(15);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      n4 = inheritance_spec();
        n3.addNode(n4);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
     {if (true) return new interface_header(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public interface_body interface_body() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   export n1;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
      case 19:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 51:
      case 55:
      case 56:
      case 59:
      case 60:
      case 61:
      case 63:
      case 64:
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      n1 = export();
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
     {if (true) return new interface_body(n0);}
    throw new Error("Missing return statement in function");
  }

  final public export export() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   type_dcl n2;
   NodeToken n3;
   Token n4;
   NodeSequence n5;
   const_dcl n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   except_dcl n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   attr_dcl n14;
   NodeToken n15;
   Token n16;
   NodeSequence n17;
   op_dcl n18;
   NodeToken n19;
   Token n20;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
    case 46:
    case 47:
    case 51:
        n1 = new NodeSequence(2);
      n2 = type_dcl();
        n1.addNode(n2);
      n4 = jj_consume_token(11);
               n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case 19:
        n5 = new NodeSequence(2);
      n6 = const_dcl();
        n5.addNode(n6);
      n8 = jj_consume_token(11);
               n7 = JTBToolkit.makeNodeToken(n8);
        n5.addNode(n7);
        n0 = new NodeChoice(n5, 1);
      break;
    case 61:
        n9 = new NodeSequence(2);
      n10 = except_dcl();
        n9.addNode(n10);
      n12 = jj_consume_token(11);
                n11 = JTBToolkit.makeNodeToken(n12);
        n9.addNode(n11);
        n0 = new NodeChoice(n9, 2);
      break;
    case 59:
    case 60:
        n13 = new NodeSequence(2);
      n14 = attr_dcl();
        n13.addNode(n14);
      n16 = jj_consume_token(11);
                n15 = JTBToolkit.makeNodeToken(n16);
        n13.addNode(n15);
        n0 = new NodeChoice(n13, 3);
      break;
    case 18:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 55:
    case 56:
    case 63:
    case 64:
    case ID:
        n17 = new NodeSequence(2);
      n18 = op_dcl();
        n17.addNode(n18);
      n20 = jj_consume_token(11);
                n19 = JTBToolkit.makeNodeToken(n20);
        n17.addNode(n19);
        n0 = new NodeChoice(n17, 4);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new export(n0);}
    throw new Error("Missing return statement in function");
  }

  final public inheritance_spec inheritance_spec() throws ParseException {
   NodeToken n0;
   Token n1;
   scoped_name n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   scoped_name n7;
    n1 = jj_consume_token(16);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = scoped_name();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(17);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = scoped_name();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new inheritance_spec(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public scoped_name scoped_name() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   identifier n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   identifier n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      n2 = jj_consume_token(18);
                n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    n3 = identifier();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(18);
                n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = identifier();
        n5.addNode(n8);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
     {if (true) return new scoped_name(n0,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  final public const_dcl const_dcl() throws ParseException {
   NodeToken n0;
   Token n1;
   const_type n2;
   identifier n3;
   NodeToken n4;
   Token n5;
   const_exp n6;
    n1 = jj_consume_token(19);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = const_type();
    n3 = identifier();
    n5 = jj_consume_token(20);
            n4 = JTBToolkit.makeNodeToken(n5);
    n6 = const_exp();
     {if (true) return new const_dcl(n0,n2,n3,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public const_type const_type() throws ParseException {
   NodeChoice n0;
   integer_type n1;
   char_type n2;
   boolean_type n3;
   floating_pt_type n4;
   string_type n5;
   scoped_name n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case 40:
    case 41:
      n1 = integer_type();
        n0 = new NodeChoice(n1, 0);
      break;
    case 42:
      n2 = char_type();
        n0 = new NodeChoice(n2, 1);
      break;
    case 43:
      n3 = boolean_type();
        n0 = new NodeChoice(n3, 2);
      break;
    case 37:
    case 38:
      n4 = floating_pt_type();
        n0 = new NodeChoice(n4, 3);
      break;
    case 55:
    case 56:
      n5 = string_type();
        n0 = new NodeChoice(n5, 4);
      break;
    case 18:
    case ID:
      n6 = scoped_name();
        n0 = new NodeChoice(n6, 5);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new const_type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public const_exp const_exp() throws ParseException {
   or_expr n0;
    n0 = or_expr();
     {if (true) return new const_exp(n0);}
    throw new Error("Missing return statement in function");
  }

  final public or_expr or_expr() throws ParseException {
   xor_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   xor_expr n5;
    n0 = xor_expr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(21);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = xor_expr();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new or_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public xor_expr xor_expr() throws ParseException {
   and_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   and_expr n5;
    n0 = and_expr();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 22:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(22);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = and_expr();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new xor_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public and_expr and_expr() throws ParseException {
   shift_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   shift_expr n5;
    n0 = shift_expr();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(23);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = shift_expr();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new and_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public shift_expr shift_expr() throws ParseException {
   add_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   add_expr n8;
    n0 = add_expr();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
      case 25:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        n5 = jj_consume_token(24);
                      n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case 25:
        n7 = jj_consume_token(25);
                      n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = add_expr();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new shift_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public add_expr add_expr() throws ParseException {
   mult_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   mult_expr n8;
    n0 = mult_expr();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
      case 27:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_10;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        n5 = jj_consume_token(26);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case 27:
        n7 = jj_consume_token(27);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = mult_expr();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new add_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public mult_expr mult_expr() throws ParseException {
   unary_expr n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   unary_expr n10;
    n0 = unary_expr();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
      case 29:
      case 30:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        n5 = jj_consume_token(28);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case 29:
        n7 = jj_consume_token(29);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case 30:
        n9 = jj_consume_token(30);
                     n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n10 = unary_expr();
        n2.addNode(n10);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new mult_expr(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public unary_expr unary_expr() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   unary_operator n1;
   primary_expr n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
    case 27:
    case 31:
      n1 = unary_operator();
        n0.addNode(n1);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    n2 = primary_expr();
     {if (true) return new unary_expr(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public unary_operator unary_operator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      n2 = jj_consume_token(27);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 26:
      n4 = jj_consume_token(26);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case 31:
      n6 = jj_consume_token(31);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new unary_operator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public primary_expr primary_expr() throws ParseException {
   NodeChoice n0;
   scoped_name n1;
   literal n2;
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   const_exp n6;
   NodeToken n7;
   Token n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
    case ID:
      n1 = scoped_name();
        n0 = new NodeChoice(n1, 0);
      break;
    case 34:
    case 35:
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
    case FLOATONE:
    case FLOATTWO:
    case CHARACTER:
    case STRING:
      n2 = literal();
        n0 = new NodeChoice(n2, 1);
      break;
    case 32:
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(32);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = const_exp();
        n3.addNode(n6);
      n8 = jj_consume_token(33);
               n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new primary_expr(n0);}
    throw new Error("Missing return statement in function");
  }

  final public literal literal() throws ParseException {
   NodeChoice n0;
   integer_literal n1;
   string_literal n2;
   character_literal n3;
   floating_pt_literal n4;
   boolean_literal n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
      n1 = integer_literal();
        n0 = new NodeChoice(n1, 0);
      break;
    case STRING:
      n2 = string_literal();
        n0 = new NodeChoice(n2, 1);
      break;
    case CHARACTER:
      n3 = character_literal();
        n0 = new NodeChoice(n3, 2);
      break;
    case FLOATONE:
    case FLOATTWO:
      n4 = floating_pt_literal();
        n0 = new NodeChoice(n4, 3);
      break;
    case 34:
    case 35:
      n5 = boolean_literal();
        n0 = new NodeChoice(n5, 4);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public boolean_literal boolean_literal() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      n2 = jj_consume_token(34);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 35:
      n4 = jj_consume_token(35);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new boolean_literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public positive_int_const positive_int_const() throws ParseException {
   const_exp n0;
    n0 = const_exp();
     {if (true) return new positive_int_const(n0);}
    throw new Error("Missing return statement in function");
  }

  final public type_dcl type_dcl() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   type_declarator n4;
   struct_type n5;
   union_type n6;
   enum_type n7;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(36);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = type_declarator();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case 46:
      n5 = struct_type();
        n0 = new NodeChoice(n5, 1);
      break;
    case 47:
      n6 = union_type();
        n0 = new NodeChoice(n6, 2);
      break;
    case 51:
      n7 = enum_type();
        n0 = new NodeChoice(n7, 3);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new type_dcl(n0);}
    throw new Error("Missing return statement in function");
  }

  final public type_declarator type_declarator() throws ParseException {
   type_spec n0;
   declarators n1;
    n0 = type_spec();
    n1 = declarators();
     {if (true) return new type_declarator(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public type_spec type_spec() throws ParseException {
   NodeChoice n0;
   simple_type_spec n1;
   constr_type_spec n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 52:
    case 55:
    case 56:
    case ID:
      n1 = simple_type_spec();
        n0 = new NodeChoice(n1, 0);
      break;
    case 46:
    case 47:
    case 51:
      n2 = constr_type_spec();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new type_spec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public simple_type_spec simple_type_spec() throws ParseException {
   NodeChoice n0;
   base_type_spec n1;
   template_type_spec n2;
   scoped_name n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      n1 = base_type_spec();
        n0 = new NodeChoice(n1, 0);
      break;
    case 52:
    case 55:
    case 56:
      n2 = template_type_spec();
        n0 = new NodeChoice(n2, 1);
      break;
    case 18:
    case ID:
      n3 = scoped_name();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new simple_type_spec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public base_type_spec base_type_spec() throws ParseException {
   NodeChoice n0;
   floating_pt_type n1;
   integer_type n2;
   char_type n3;
   boolean_type n4;
   octet_type n5;
   any_type n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
    case 38:
      n1 = floating_pt_type();
        n0 = new NodeChoice(n1, 0);
      break;
    case 39:
    case 40:
    case 41:
      n2 = integer_type();
        n0 = new NodeChoice(n2, 1);
      break;
    case 42:
      n3 = char_type();
        n0 = new NodeChoice(n3, 2);
      break;
    case 43:
      n4 = boolean_type();
        n0 = new NodeChoice(n4, 3);
      break;
    case 44:
      n5 = octet_type();
        n0 = new NodeChoice(n5, 4);
      break;
    case 45:
      n6 = any_type();
        n0 = new NodeChoice(n6, 5);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new base_type_spec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public template_type_spec template_type_spec() throws ParseException {
   NodeChoice n0;
   sequence_type n1;
   string_type n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      n1 = sequence_type();
        n0 = new NodeChoice(n1, 0);
      break;
    case 55:
    case 56:
      n2 = string_type();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new template_type_spec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public constr_type_spec constr_type_spec() throws ParseException {
   NodeChoice n0;
   struct_type n1;
   union_type n2;
   enum_type n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      n1 = struct_type();
        n0 = new NodeChoice(n1, 0);
      break;
    case 47:
      n2 = union_type();
        n0 = new NodeChoice(n2, 1);
      break;
    case 51:
      n3 = enum_type();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new constr_type_spec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public declarators declarators() throws ParseException {
   declarator n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   declarator n5;
    n0 = declarator();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(17);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = declarator();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new declarators(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public declarator declarator() throws ParseException {
   NodeChoice n0;
   complex_declarator n1;
   simple_declarator n2;
    if (jj_2_2(2)) {
      n1 = complex_declarator();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        n2 = simple_declarator();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new declarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public simple_declarator simple_declarator() throws ParseException {
   identifier n0;
    n0 = identifier();
     {if (true) return new simple_declarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public complex_declarator complex_declarator() throws ParseException {
   array_declarator n0;
    n0 = array_declarator();
     {if (true) return new complex_declarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public floating_pt_type floating_pt_type() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      n2 = jj_consume_token(37);
                   n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 38:
      n4 = jj_consume_token(38);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new floating_pt_type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public integer_type integer_type() throws ParseException {
   NodeChoice n0;
   signed_int n1;
   unsigned_int n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case 40:
      n1 = signed_int();
        n0 = new NodeChoice(n1, 0);
      break;
    case 41:
      n2 = unsigned_int();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new integer_type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public signed_int signed_int() throws ParseException {
   NodeChoice n0;
   signed_long_long_int n1;
   signed_long_double_int n2;
   signed_long_int n3;
   signed_short_int n4;
    if (jj_2_3(2)) {
      n1 = signed_long_long_int();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_4(2)) {
      n2 = signed_long_double_int();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_5(2)) {
      n3 = signed_long_int();
        n0 = new NodeChoice(n3, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        n4 = signed_short_int();
        n0 = new NodeChoice(n4, 3);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new signed_int(n0);}
    throw new Error("Missing return statement in function");
  }

  final public signed_long_int signed_long_int() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(39);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new signed_long_int(n0);}
    throw new Error("Missing return statement in function");
  }

  final public signed_short_int signed_short_int() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(40);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new signed_short_int(n0);}
    throw new Error("Missing return statement in function");
  }

  final public signed_long_long_int signed_long_long_int() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(39);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(39);
               n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new signed_long_long_int(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public signed_long_double_int signed_long_double_int() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(39);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(38);
                 n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new signed_long_double_int(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public unsigned_int unsigned_int() throws ParseException {
   NodeChoice n0;
   unsigned_long_long_int n1;
   unsigned_long_int n2;
   unsigned_short_int n3;
    if (jj_2_6(3)) {
      n1 = unsigned_long_long_int();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_7(3)) {
      n2 = unsigned_long_int();
        n0 = new NodeChoice(n2, 1);
    } else if (jj_2_8(3)) {
      n3 = unsigned_short_int();
        n0 = new NodeChoice(n3, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new unsigned_int(n0);}
    throw new Error("Missing return statement in function");
  }

  final public unsigned_long_int unsigned_long_int() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(41);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(39);
               n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new unsigned_long_int(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public unsigned_short_int unsigned_short_int() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
    n1 = jj_consume_token(41);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(40);
                n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new unsigned_short_int(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public unsigned_long_long_int unsigned_long_long_int() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(41);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(39);
               n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(39);
               n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new unsigned_long_long_int(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public char_type char_type() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(42);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new char_type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public boolean_type boolean_type() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(43);
                  n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new boolean_type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public octet_type octet_type() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(44);
                n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new octet_type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public any_type any_type() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(45);
              n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new any_type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public struct_type struct_type() throws ParseException {
   NodeToken n0;
   Token n1;
   identifier n2;
   NodeToken n3;
   Token n4;
   member_list n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(46);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = identifier();
    n4 = jj_consume_token(13);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = member_list();
    n7 = jj_consume_token(14);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new struct_type(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  final public member_list member_list() throws ParseException {
   NodeList n0 = new NodeList();
   member n1;
    label_13:
    while (true) {
      n1 = member();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 51:
      case 52:
      case 55:
      case 56:
      case ID:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_13;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new member_list(n0);}
    throw new Error("Missing return statement in function");
  }

  final public member member() throws ParseException {
   type_spec n0;
   declarators n1;
   NodeToken n2;
   Token n3;
    n0 = type_spec();
    n1 = declarators();
    n3 = jj_consume_token(11);
            n2 = JTBToolkit.makeNodeToken(n3);
     {if (true) return new member(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  final public union_type union_type() throws ParseException {
   NodeToken n0;
   Token n1;
   identifier n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   switch_type_spec n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   switch_body n12;
   NodeToken n13;
   Token n14;
    n1 = jj_consume_token(47);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = identifier();
    n4 = jj_consume_token(48);
                 n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(32);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = switch_type_spec();
    n9 = jj_consume_token(33);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(13);
             n10 = JTBToolkit.makeNodeToken(n11);
    n12 = switch_body();
    n14 = jj_consume_token(14);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new union_type(n0,n2,n3,n5,n7,n8,n10,n12,n13);}
    throw new Error("Missing return statement in function");
  }

  final public switch_type_spec switch_type_spec() throws ParseException {
   NodeChoice n0;
   integer_type n1;
   char_type n2;
   boolean_type n3;
   enum_type n4;
   scoped_name n5;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case 40:
    case 41:
      n1 = integer_type();
        n0 = new NodeChoice(n1, 0);
      break;
    case 42:
      n2 = char_type();
        n0 = new NodeChoice(n2, 1);
      break;
    case 43:
      n3 = boolean_type();
        n0 = new NodeChoice(n3, 2);
      break;
    case 51:
      n4 = enum_type();
        n0 = new NodeChoice(n4, 3);
      break;
    case 18:
    case ID:
      n5 = scoped_name();
        n0 = new NodeChoice(n5, 4);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new switch_type_spec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public switch_body switch_body() throws ParseException {
   NodeList n0 = new NodeList();
   casex n1;
    label_14:
    while (true) {
      n1 = casex();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
      case 50:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_14;
      }
    }
     n0.nodes.trimToSize();
     {if (true) return new switch_body(n0);}
    throw new Error("Missing return statement in function");
  }

  final public casex casex() throws ParseException {
   NodeList n0 = new NodeList();
   case_label n1;
   element_spec n2;
   NodeToken n3;
   Token n4;
    label_15:
    while (true) {
      n1 = case_label();
        n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
      case 50:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_15;
      }
    }
     n0.nodes.trimToSize();
    n2 = element_spec();
    n4 = jj_consume_token(11);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new casex(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public case_label case_label() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   const_exp n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 49:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(49);
                  n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = const_exp();
        n1.addNode(n4);
      n6 = jj_consume_token(16);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
      break;
    case 50:
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(50);
                     n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(16);
                n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
        n0 = new NodeChoice(n7, 1);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new case_label(n0);}
    throw new Error("Missing return statement in function");
  }

  final public element_spec element_spec() throws ParseException {
   type_spec n0;
   declarator n1;
    n0 = type_spec();
    n1 = declarator();
     {if (true) return new element_spec(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public enum_type enum_type() throws ParseException {
   NodeToken n0;
   Token n1;
   identifier n2;
   NodeToken n3;
   Token n4;
   enumerator n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   enumerator n10;
   NodeToken n11;
   Token n12;
    n1 = jj_consume_token(51);
               n0 = JTBToolkit.makeNodeToken(n1);
    n2 = identifier();
    n4 = jj_consume_token(13);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = enumerator();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_16;
      }
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(17);
               n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = enumerator();
        n7.addNode(n10);
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    n12 = jj_consume_token(14);
             n11 = JTBToolkit.makeNodeToken(n12);
     {if (true) return new enum_type(n0,n2,n3,n5,n6,n11);}
    throw new Error("Missing return statement in function");
  }

  final public enumerator enumerator() throws ParseException {
   identifier n0;
    n0 = identifier();
     {if (true) return new enumerator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public sequence_type sequence_type() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   simple_type_spec n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   positive_int_const n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(52);
                   n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(53);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = simple_type_spec();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(17);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = positive_int_const();
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    n11 = jj_consume_token(54);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new sequence_type(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public string_type string_type() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   positive_int_const n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeOptional n14 = new NodeOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   positive_int_const n18;
   NodeToken n19;
   Token n20;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(55);
                    n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
           n5 = new NodeSequence(3);
        n7 = jj_consume_token(53);
                  n6 = JTBToolkit.makeNodeToken(n7);
           n5.addNode(n6);
        n8 = positive_int_const();
           n5.addNode(n8);
        n10 = jj_consume_token(54);
                   n9 = JTBToolkit.makeNodeToken(n10);
           n5.addNode(n9);
           n4.addNode(n5);
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case 56:
        n11 = new NodeSequence(2);
      n13 = jj_consume_token(56);
                      n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
           n15 = new NodeSequence(3);
        n17 = jj_consume_token(53);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n15.addNode(n16);
        n18 = positive_int_const();
           n15.addNode(n18);
        n20 = jj_consume_token(54);
                   n19 = JTBToolkit.makeNodeToken(n20);
           n15.addNode(n19);
           n14.addNode(n15);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
        n11.addNode(n14);
        n0 = new NodeChoice(n11, 1);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new string_type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public array_declarator array_declarator() throws ParseException {
   identifier n0;
   NodeList n1 = new NodeList();
   fixed_array_size n2;
    n0 = identifier();
    label_17:
    while (true) {
      n2 = fixed_array_size();
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 57:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_17;
      }
    }
     n1.nodes.trimToSize();
     {if (true) return new array_declarator(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public fixed_array_size fixed_array_size() throws ParseException {
   NodeToken n0;
   Token n1;
   positive_int_const n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(57);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = positive_int_const();
    n4 = jj_consume_token(58);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new fixed_array_size(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public attr_dcl attr_dcl() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   param_type_spec n5;
   simple_declarator n6;
   NodeListOptional n7 = new NodeListOptional();
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   simple_declarator n11;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      n2 = jj_consume_token(59);
                      n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    n4 = jj_consume_token(60);
                    n3 = JTBToolkit.makeNodeToken(n4);
    n5 = param_type_spec();
    n6 = simple_declarator();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_18;
      }
        n8 = new NodeSequence(2);
      n10 = jj_consume_token(17);
                n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n11 = simple_declarator();
        n8.addNode(n11);
        n7.addNode(n8);
    }
     n7.nodes.trimToSize();
     {if (true) return new attr_dcl(n0,n3,n5,n6,n7);}
    throw new Error("Missing return statement in function");
  }

  final public except_dcl except_dcl() throws ParseException {
   NodeToken n0;
   Token n1;
   identifier n2;
   NodeOptional n3 = new NodeOptional();
   NodeToken n4;
   Token n5;
   NodeListOptional n6 = new NodeListOptional();
   NodeChoice n7;
   member n8;
   NodeToken n9;
   Token n10;
   NodeOptional n11 = new NodeOptional();
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(61);
                    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 13:
      n5 = jj_consume_token(13);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 51:
      case 52:
      case 55:
      case 56:
      case 62:
      case ID:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 51:
      case 52:
      case 55:
      case 56:
      case ID:
        n8 = member();
           n7 = new NodeChoice(n8, 0);
        break;
      case 62:
        n10 = jj_consume_token(62);
                                n9 = JTBToolkit.makeNodeToken(n10);
           n7 = new NodeChoice(n9, 1);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n6.addNode(n7);
    }
     n6.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 14:
      n13 = jj_consume_token(14);
                n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
     {if (true) return new except_dcl(n0,n2,n3,n6,n11);}
    throw new Error("Missing return statement in function");
  }

  final public op_dcl op_dcl() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   op_attribute n1;
   op_type_spec n2;
   identifier n3;
   parameter_dcls n4;
   NodeOptional n5 = new NodeOptional();
   raises_expr n6;
   NodeOptional n7 = new NodeOptional();
   context_expr n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      n1 = op_attribute();
        n0.addNode(n1);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    n2 = op_type_spec();
    n3 = identifier();
    n4 = parameter_dcls();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      n6 = raises_expr();
        n5.addNode(n6);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 69:
      n8 = context_expr();
        n7.addNode(n8);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
     {if (true) return new op_dcl(n0,n2,n3,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public op_attribute op_attribute() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(63);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new op_attribute(n0);}
    throw new Error("Missing return statement in function");
  }

  final public op_type_spec op_type_spec() throws ParseException {
   NodeChoice n0;
   param_type_spec n1;
   NodeToken n2;
   Token n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 55:
    case 56:
    case ID:
      n1 = param_type_spec();
        n0 = new NodeChoice(n1, 0);
      break;
    case 64:
      n3 = jj_consume_token(64);
                  n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new op_type_spec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public parameter_dcls parameter_dcls() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   param_dcl n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   param_dcl n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(32);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
    case 66:
    case 67:
        n5 = new NodeListOptional();
        n3 = new NodeSequence(2);
      n4 = param_dcl();
        n3.addNode(n4);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 17:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_20;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(17);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = param_dcl();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    n11 = jj_consume_token(33);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new parameter_dcls(n0,n2,n10);}
    throw new Error("Missing return statement in function");
  }

  final public param_dcl param_dcl() throws ParseException {
   param_attribute n0;
   param_type_spec n1;
   simple_declarator n2;
    n0 = param_attribute();
    n1 = param_type_spec();
    n2 = simple_declarator();
     {if (true) return new param_dcl(n0,n1,n2);}
    throw new Error("Missing return statement in function");
  }

  final public param_attribute param_attribute() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
      n2 = jj_consume_token(65);
                n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case 66:
      n4 = jj_consume_token(66);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case 67:
      n6 = jj_consume_token(67);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new param_attribute(n0);}
    throw new Error("Missing return statement in function");
  }

  final public raises_expr raises_expr() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   scoped_name n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   scoped_name n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(68);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(32);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = scoped_name();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_21;
      }
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(17);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = scoped_name();
        n6.addNode(n9);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n11 = jj_consume_token(33);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new raises_expr(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public context_expr context_expr() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   string_literal n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   string_literal n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(69);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(32);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = string_literal();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_22;
      }
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(17);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = string_literal();
        n6.addNode(n9);
        n5.addNode(n6);
    }
     n5.nodes.trimToSize();
    n11 = jj_consume_token(33);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new context_expr(n0,n2,n4,n5,n10);}
    throw new Error("Missing return statement in function");
  }

  final public param_type_spec param_type_spec() throws ParseException {
   NodeChoice n0;
   base_type_spec n1;
   string_type n2;
   scoped_name n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      n1 = base_type_spec();
        n0 = new NodeChoice(n1, 0);
      break;
    case 55:
    case 56:
      n2 = string_type();
        n0 = new NodeChoice(n2, 1);
      break;
    case 18:
    case ID:
      n3 = scoped_name();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new param_type_spec(n0);}
    throw new Error("Missing return statement in function");
  }

  final public identifier identifier() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(ID);
             n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new identifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public integer_literal integer_literal() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
      n2 = jj_consume_token(OCTALINT);
                      n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case DECIMALINT:
      n4 = jj_consume_token(DECIMALINT);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case HEXADECIMALINT:
      n6 = jj_consume_token(HEXADECIMALINT);
                            n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new integer_literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public string_literal string_literal() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(STRING);
                 n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new string_literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public character_literal character_literal() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(CHARACTER);
                    n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new character_literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public floating_pt_literal floating_pt_literal() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATONE:
      n2 = jj_consume_token(FLOATONE);
                      n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOATTWO:
      n4 = jj_consume_token(FLOATTWO);
                      n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new floating_pt_literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(38)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    Token xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(39)) return true;
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_31()) return true;
    if (jj_scan_token(13)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  public IDLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[65];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x89000,0x89000,0x89000,0x8000,0x10000,0xc0000,0xc0000,0x20000,0x40000,0x40000,0x40000,0x200000,0x400000,0x800000,0x3000000,0x3000000,0xc000000,0xc000000,0x70000000,0x70000000,0x8c000000,0x8c000000,0x40000,0x0,0x0,0x0,0x40000,0x40000,0x0,0x0,0x0,0x20000,0x0,0x0,0x0,0x0,0x40000,0x40000,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x20000,0x2000,0x40000,0x40000,0x4000,0x0,0x0,0x0,0x40000,0x20000,0x0,0x0,0x20000,0x20000,0x40000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x2008c010,0x2008c010,0x2008c010,0x0,0x0,0xb988fff0,0xb988fff0,0x0,0x0,0x0,0x1800fe0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xd,0xc,0xc,0x8c010,0x198ffe0,0x1903fe0,0x3fe0,0x1900000,0x8c000,0x0,0x0,0x60,0x380,0x100,0x198ffe0,0x80f80,0x60000,0x60000,0x60000,0x0,0x0,0x200000,0x200000,0x1800000,0x2000000,0x8000000,0x0,0x0,0x4198ffe0,0x4198ffe0,0x0,0x80000000,0x0,0x0,0x1803fe0,0x0,0x0,0x0,0x0,0x0,0x1803fe0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x41,0x41,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3fc0,0x3f80,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x10,0x20,0x41,0x0,0xe,0xe,0x0,0x0,0x40,0x380,0xc00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[8];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public IDLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public IDLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public IDLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public IDLParser(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 65; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  @SuppressWarnings("unchecked")
  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  @SuppressWarnings("unchecked")
  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[78];
    for (int i = 0; i < 78; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 65; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 78; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   @SuppressWarnings("unchecked")
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}
