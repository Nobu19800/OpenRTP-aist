//
// Generated by JTB 1.3.2
//

package jp.go.aist.rtm.rtcbuilder.corba.idl.parser.syntaxtree;

/**
 * Grammar production:
 * interface_header -> interface_header()
 * nodeToken -> "{"
 * interface_body -> interface_body()
 * nodeToken1 -> "}"
 */
public class interface_dcl implements Node {
   private Node parent;
   public interface_header interface_header;
   public NodeToken nodeToken;
   public interface_body interface_body;
   public NodeToken nodeToken1;

   public interface_dcl(interface_header n0, NodeToken n1, interface_body n2, NodeToken n3) {
      interface_header = n0;
      if ( interface_header != null ) interface_header.setParent(this);
      nodeToken = n1;
      if ( nodeToken != null ) nodeToken.setParent(this);
      interface_body = n2;
      if ( interface_body != null ) interface_body.setParent(this);
      nodeToken1 = n3;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
   }

   public interface_dcl(interface_header n0, interface_body n1) {
      interface_header = n0;
      if ( interface_header != null ) interface_header.setParent(this);
      nodeToken = new NodeToken("{");
      if ( nodeToken != null ) nodeToken.setParent(this);
      interface_body = n1;
      if ( interface_body != null ) interface_body.setParent(this);
      nodeToken1 = new NodeToken("}");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
   }

   public void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

