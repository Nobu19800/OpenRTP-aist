//
// Generated by JTB 1.3.2
//

package jp.go.aist.rtm.rtcbuilder.corba.idl.parser.syntaxtree;

/**
 * Grammar production:
 * nodeToken -> "sequence"
 * nodeToken1 -> "<"
 * simple_type_spec -> simple_type_spec()
 * nodeOptional -> [ "," positive_int_const() ]
 * nodeToken2 -> ">"
 */
public class sequence_type implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public NodeToken nodeToken1;
   public simple_type_spec simple_type_spec;
   public NodeOptional nodeOptional;
   public NodeToken nodeToken2;

   public sequence_type(NodeToken n0, NodeToken n1, simple_type_spec n2, NodeOptional n3, NodeToken n4) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeToken1 = n1;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      simple_type_spec = n2;
      if ( simple_type_spec != null ) simple_type_spec.setParent(this);
      nodeOptional = n3;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
      nodeToken2 = n4;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public sequence_type(simple_type_spec n0, NodeOptional n1) {
      nodeToken = new NodeToken("sequence");
      if ( nodeToken != null ) nodeToken.setParent(this);
      nodeToken1 = new NodeToken("<");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      simple_type_spec = n0;
      if ( simple_type_spec != null ) simple_type_spec.setParent(this);
      nodeOptional = n1;
      if ( nodeOptional != null ) nodeOptional.setParent(this);
      nodeToken2 = new NodeToken(">");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

