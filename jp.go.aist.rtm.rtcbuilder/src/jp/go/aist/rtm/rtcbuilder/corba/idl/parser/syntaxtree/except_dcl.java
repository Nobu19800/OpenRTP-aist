//
// Generated by JTB 1.3.2
//

package jp.go.aist.rtm.rtcbuilder.corba.idl.parser.syntaxtree;

/**
 * Grammar production:
 * <PRE>
 * nodeToken -> "exception"
 * identifier -> identifier()
 * nodeToken1 -> "{"
 * nodeListOptional -> ( member() )*
 * nodeToken2 -> "}"
 * </PRE>
 */
public class except_dcl implements Node {
   private Node parent;
   public NodeToken nodeToken;
   public identifier identifier;
   public NodeToken nodeToken1;
   public NodeListOptional nodeListOptional;
   public NodeToken nodeToken2;

   public except_dcl(NodeToken n0, identifier n1, NodeToken n2, NodeListOptional n3, NodeToken n4) {
      nodeToken = n0;
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n1;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken1 = n2;
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeListOptional = n3;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeToken2 = n4;
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public except_dcl(identifier n0, NodeListOptional n1) {
      nodeToken = new NodeToken("exception");
      if ( nodeToken != null ) nodeToken.setParent(this);
      identifier = n0;
      if ( identifier != null ) identifier.setParent(this);
      nodeToken1 = new NodeToken("{");
      if ( nodeToken1 != null ) nodeToken1.setParent(this);
      nodeListOptional = n1;
      if ( nodeListOptional != null ) nodeListOptional.setParent(this);
      nodeToken2 = new NodeToken("}");
      if ( nodeToken2 != null ) nodeToken2.setParent(this);
   }

   public void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(jp.go.aist.rtm.rtcbuilder.corba.idl.parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
   public void setParent(Node n) { parent = n; }
   public Node getParent()       { return parent; }
}

