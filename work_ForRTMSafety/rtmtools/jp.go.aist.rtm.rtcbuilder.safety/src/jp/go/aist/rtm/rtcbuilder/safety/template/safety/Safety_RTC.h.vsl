// -*- RTMSafety -*-
/*!
 * @file  ${rtcParam.name}.h
 * @brief ${rtcParam.description}
 * @date  ${dol}Date${dol}
#parse("${template}/safety/_doc.vsl")
 * ${dol}Id${dol}
 */

${sharp}ifndef _${rtcParam.name.toUpperCase()}_H
${sharp}define _${rtcParam.name.toUpperCase()}_H

${sharp}include "RTMSafetyCommon.h"
${sharp}include "RtObject.h"
${sharp}include "DataPort.h"

typedef RtObject_t ${rtcParam.name.toUpperCase()}_t;


// Service implementation headers
// <rtc-template block="service_impl_h">
#foreach($providerIdlFile in ${rtcParam.providerIdlPathes})
${sharp}include "${tmpltHelper.getFilenameNoExt(${providerIdlFile.idlFile})}${tmpltHelper.serviceImplSuffix}.h"
#end

// </rtc-template>

// Service Consumer stub headers
// <rtc-template block="consumer_stub_h">
#foreach($consumerIdlFile in ${rtcParam.consumerIdlPathes})
${sharp}include "${tmpltHelper.getFilenameNoExt(${consumerIdlFile.idlFile})}${tmpltHelper.serviceStubSuffix}.h"
#end

// </rtc-template>

#foreach($type in ${cXXConv.getPortModules(${rtcParam})})
${cXXConv.getDataportUsingNamespace(${type})}
#end

/*!
 * @brief ${rtcParam.description}
#if( ${rtcParam.docDescription.length()} > 0 )
 *
 * ${tmpltHelper.convertDoc(${rtcParam.docDescription})}
#end
#if( ${rtcParam.docInOut.length()} > 0 )
 *
 * ${tmpltHelper.convertDoc(${rtcParam.docInOut})}
#end
#if( ${rtcParam.docAlgorithm.length()} > 0 )
 *
 * ${tmpltHelper.convertDoc(${rtcParam.docAlgorithm})}
#end
#if( ${rtcParam.docReference.length()} > 0 )
 *
 * ${tmpltHelper.convertDoc(${rtcParam.docReference})}
#end
 *
 */

IMPORT ReturnCode_t ${rtcParam.name}_create(${rtcParam.name}_t* pself);

  /***
#if(${rtcParam.getDocActionOverView(0).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(0)})}
#end
   *
   * The initialize action (on CREATED->ALIVE transition)
   * formaer rtc_init_entry() 
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(0).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(0)})}
#end
#if(${rtcParam.getDocActionPostCondition(0).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(0)})}
#end
   * 
   */
  #if(${rtcParam.configParams.size()}==0 && ${rtcParam.IsNotImplemented(0)} && ${rtcParam.inports.size()}==0 && ${rtcParam.outports.size()}==0 && ${rtcParam.servicePorts.size()}==0)//#end IMPORT ReturnCode_t ${rtcParam.name}_on_initialize( void );

  /***
#if(${rtcParam.getDocActionOverView(0).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(1)})}
#end
   *
   * The finalize action (on ALIVE->END transition)
   * formaer rtc_exiting_entry()
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(1).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(1)})}
#end
#if(${rtcParam.getDocActionPostCondition(1).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(1)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(1)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_finalize( void );

  /***
#if(${rtcParam.getDocActionOverView(2).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(2)})}
#end
   *
   * The startup action when ExecutionContext startup
   * former rtc_starting_entry()
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(2).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(2)})}
#end
#if(${rtcParam.getDocActionPostCondition(2).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(2)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(2)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_startup( void );

  /***
#if(${rtcParam.getDocActionOverView(3).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(3)})}
#end
   *
   * The shutdown action when ExecutionContext stop
   * former rtc_stopping_entry()
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(3).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(3)})}
#end
#if(${rtcParam.getDocActionPostCondition(3).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(3)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(3)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_shutdown( void );

  /***
#if(${rtcParam.getDocActionOverView(4).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(4)})}
#end
   *
   * The activated action (Active state entry action)
   * former rtc_active_entry()
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(4).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(4)})}
#end
#if(${rtcParam.getDocActionPostCondition(4).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(4)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(4)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_activated( void );

  /***
#if(${rtcParam.getDocActionOverView(5).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(5)})}
#end
   *
   * The deactivated action (Active state exit action)
   * former rtc_active_exit()
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(5).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(5)})}
#end
#if(${rtcParam.getDocActionPostCondition(5).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(5)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(5)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_deactivated( void );

  /***
#if(${rtcParam.getDocActionOverView(6).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(6)})}
#end
   *
   * The aborting action when main logic error occurred.
   * former rtc_aborting_entry()
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(6).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(6)})}
#end
#if(${rtcParam.getDocActionPostCondition(6).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(6)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(6)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_aborting( void );

  /***
#if(${rtcParam.getDocActionOverView(7).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(7)})}
#end
   *
   * The error action in ERROR state
   * former rtc_error_do()
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(7).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(7)})}
#end
#if(${rtcParam.getDocActionPostCondition(7).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(7)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(7)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_error( void );

  /***
#if(${rtcParam.getDocActionOverView(8).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(8)})}
#end
   *
   * The reset action that is invoked resetting
   * This is same but different the former rtc_init_entry()
   *
   * @return ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(8).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(8)})}
#end
#if(${rtcParam.getDocActionPostCondition(8).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(8)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(8)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_reset( void );

  /***
#if(${rtcParam.getDocActionOverView(9).length()}>0)   * ${tmpltHelper.convertDescDoc(${rtcParam.getDocActionOverView(9)})}
#end
   *
   * The execution action that is invoked periodically
   * former rtc_active_do()
   *
   * @return RTC::ReturnCode_t
   * 
#if(${rtcParam.getDocActionPreCondition(9).length()}>0)   * @pre ${tmpltHelper.convertPreDoc(${rtcParam.getDocActionPreCondition(9)})}
#end
#if(${rtcParam.getDocActionPostCondition(9).length()}>0)   * @post ${tmpltHelper.convertPostDoc(${rtcParam.getDocActionPostCondition(9)})}
#end
   * 
   */
  #if(${rtcParam.IsNotImplemented(9)})//#end IMPORT ReturnCode_t ${rtcParam.name}_on_execute( void );

#endif /* !_${rtcParam.name}_H_ */
 
