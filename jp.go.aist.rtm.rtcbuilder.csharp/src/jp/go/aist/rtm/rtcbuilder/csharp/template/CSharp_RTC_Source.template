using System;
using System.Collections.Generic;
using System.Text;

using omg.org.RTC;
using RTC;
using org.omg.SDOPackage;

#foreach($type in ${csConv.getPortTypes(${rtcParam})})  
${csConv.getDataportPackageName(${type})}
#end


namespace ${rtcParam.name}
{

    public class ${rtcParam.name}
        : DataFlowComponentBase
    {
#foreach($port in ${rtcParam.inports})  
        private ${csConv.getDataTypeName(${port.type})} m_${port.name}InData = new ${csConv.getDataTypeName(${port.type})}();
        private InPort<${csConv.getDataTypeName(${port.type})}, RingBuffer<${csConv.getDataTypeName(${port.type})}>> m_${port.name}InPort;
#end
#foreach($port in ${rtcParam.outports})  
        private ${csConv.getDataTypeName(${port.type})} m_${port.name}OutData = new ${csConv.getDataTypeName(${port.type})}();
        private OutPort<${csConv.getDataTypeName(${port.type})}, RingBuffer<${csConv.getDataTypeName(${port.type})}>> m_${port.name}OutPort;
#end
#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==0)
        private ${serviceInterface.interfaceType}Impl m_${serviceInterface.name}Prov = new ${serviceInterface.interfaceType}Impl();
        private CorbaPort m_${serviceInterface.interfaceType}ProvPort = new CorbaPort("${serviceInterface.name}Prov");
#elseif(${serviceInterface.index}==1)
        private CorbaConsumerBase m_${serviceInterface.name}Cons = new CorbaConsumerBase();
        private CorbaPort m_${serviceInterface.interfaceType}ConsPort = new CorbaPort("${serviceInterface.name}Cons");
#end#end#end#end#end
#foreach($configParam in ${rtcParam.configParams})
#if(${csConv.isString(${configParam.type})})
        private ${configParam.type} m_${configParam.name}Conf = string.Empty;
#else
        private ${configParam.type} m_${configParam.name}Conf = new ${configParam.type}();
#end#end
        public ${rtcParam.name}(Manager manager)
            : base(manager)
        {
#foreach($port in ${rtcParam.inports})  
            m_${port.name}InPort = new InPort<${csConv.getDataTypeName(${port.type})}, RingBuffer<${csConv.getDataTypeName(${port.type})}>>("${port.name}", m_${port.name}InData);
            registerInPort("${port.name}", m_${port.name}InPort);
#end
#foreach($port in ${rtcParam.outports})  
            m_${port.name}OutPort = new OutPort<${csConv.getDataTypeName(${port.type})}, RingBuffer<${csConv.getDataTypeName(${port.type})}>>("${port.name}", m_${port.name}OutData);
            registerOutPort("${port.name}", m_${port.name}OutPort);
#end
#if(${rtcParam.servicePorts.size()}>0)
#foreach($servicePort in ${rtcParam.servicePorts})
#if(${servicePort.servicePortInterfaces.size()}>0)
#foreach($serviceInterface in ${servicePort.servicePortInterfaces})
#if(${serviceInterface.index}==0)
            m_${serviceInterface.interfaceType}ProvPort.registerProvider("${serviceInterface.name}", "${serviceInterface.interfaceType}", m_${serviceInterface.name}Prov);
            registerPort(m_${serviceInterface.interfaceType}ProvPort);
#elseif(${serviceInterface.index}==1)
            m_${serviceInterface.interfaceType}ConsPort.registerConsumer("${serviceInterface.name}", "${serviceInterface.interfaceType}", m_${serviceInterface.name}Cons);
            registerPort(m_${serviceInterface.interfaceType}ConsPort);
#end#end#end#end#end
        }

        protected override ReturnCode_t onInitialize()
        {
#foreach($configParam in ${rtcParam.configParams})  
            bindParameter("${configParam.name}", "${configParam.defaultVal}", delegate(string str)
            {
#if(${csConv.isString(${configParam.type})})
                m_${configParam.name}Conf = str;
                return true;
#elseif(${csConv.isList(${configParam.type})})
                String[] items = str.Split(new char[] {','});
                m_${configParam.name}Conf.Clear();
                Boolean ret = true;
                foreach(String item in items)
                {
#if(${csConv.isString(${csConv.getListType(${configParam.type})})})
                    m_${configParam.name}Conf.Add(item);
                }
                return ret;
#else
                    ${csConv.getListType(${configParam.type})} temp;
                    if(!${csConv.getListType(${configParam.type})}.TryParse(item, out temp))
                    {
                        ret = false;
                        continue;
                    }
                    m_${configParam.name}Conf.Add(temp);
                }
                return ret;
#end
#else
                return ${configParam.type}.TryParse(str, out m_${configParam.name}Conf);
#end
            });
#end
            return ReturnCode_t.RTC_OK;
        }

        //protected override ReturnCode_t onFinalize()
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onStartup(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onShutdown(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onActivated(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onDeactivated(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onExecute(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onAborting(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onError(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onReset(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onStateUpdate(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}

        //protected override ReturnCode_t onRateChanged(int ec_id)
        //{
        //    return ReturnCode_t.RTC_OK;
        //}
    }

    public class ${rtcParam.name}Init
    {
        public static string[] spec = new string[]
        {
            "implementation_id", "${rtcParam.name}",
            "type_name",         "${rtcParam.name}",
            "description",       "${rtcParam.description}",
            "version",           "${rtcParam.version}",
            "vendor",            "${rtcParam.vender}",
            "category",          "${rtcParam.category}",
            "activity_type",     "${rtcParam.activityType}",
            "max_instance",      "${rtcParam.maxInstance}",
            "language",          "C#",
            "lang_type",         "COMPILE"
#foreach($configParam in ${rtcParam.configParams})  
        , "conf.default.${configParam.name}",   "${configParam.defaultVal}"
#end
        };

        public ${rtcParam.name}Init(Manager manager)
        {
            Properties profile = new Properties(spec);
            manager.registerFactory(profile,
                delegate(Manager mgr) { return new ${rtcParam.name}(mgr); },
                delegate(RTObject_impl rtc) { rtc.Dispose(); });
        }
    }
}
